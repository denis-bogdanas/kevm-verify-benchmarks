;root eDSL rule from all other eDSL rules extend
[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
contract_bal: CONTRACT_BAL
contract_storage: _
contract_origstorage: _
contract_nonce: _
;origin
requires:
    andBool #rangeUInt(256, CONTRACT_BAL)
ensures:
attribute:


;eDSL rule for external contract function called getx
[inc]
k: (#execute => #halt) ~> _
statusCode: _ => EVMC_SUCCESS
output: _ => _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData("inc", .TypedArgs)
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
contract_storage: S0 => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _
coinbase: _ => _
+requires:  andBool NONCE ==Int select(S0, #hashedLocation({COMPILER}, {NONCE_SLOT}, .IntList))
            andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)


[pgm]
compiler: "Solidity"

nonce_slot: 0

contract_code: "0x6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063371303c014604e578063affed0e0146062575b600080fd5b348015605957600080fd5b506060608a565b005b348015606d57600080fd5b5060746098565b6040518082815260200191505060405180910390f35b600160005401600081905550565b600054815600a165627a7a72305820d6fb57ad2722be53b9e4b7a1739ba035aba331f9b5c2c5ba3f2c6f913907ff1f0029"
requires "abstract-semantics.k"
requires "verification.k"

module EXECUTE-EXECUTOR-VALID-SIGCHECK-PASS-OWNERCHECK-PASS-SUCCESS-CALL-1-SPEC
  imports ETHEREUM-SIMULATION
  imports ABSTRACT-SEMANTICS
  imports VERIFICATION

  // execute-executor-valid-sigcheck-pass-ownercheck-pass-success-call-1 
  rule
    <k> (#execute => #halt) ~> _ </k>
    <exit-code> 1 </exit-code>
    <mode> NORMAL </mode>
    <schedule> BYZANTIUM </schedule>
    <analysis> .Map </analysis> // not part of evm
    <ethereum>
      <evm>
        <output> _ => _ </output>
        <statusCode> _ => EVMC_SUCCESS </statusCode>
        <callStack> _ </callStack>
        <interimStates> _ </interimStates>
        <touchedAccounts> _ => _ </touchedAccounts>
        <callState>
          <program> #asMapOpCodes(#dasmOpCodes(#parseByteStack("0x608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063aa5df9e21461005c578063affed0e0146100d7578063c2d067eb14610102575b600080fd5b34801561006857600080fd5b506100956004803603602081101561007f57600080fd5b81019080803590602001909291905050506102e2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100e357600080fd5b506100ec610320565b6040518082815260200191505060405180910390f35b34801561010e57600080fd5b506102e060048036036101c081101561012657600080fd5b8101908080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f820116905080830192505050505050919291929080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f820116905080830192505050505050919291929080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f8201169050808301925050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561023057600080fd5b82018360208201111561024257600080fd5b8035906020019184600183028401116401000000008311171561026457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610326565b005b6002818154811015156102f157fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061038c5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b151561039757600080fd5b60007f3ee892349ae4bbe61dce18f95115b5dc02daf49204cc602458cd4c1f540d56d7600102868686805190602001206000548787604051602001808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001975050505050505050604051602081830303815290604052805190602001209050600060197f01000000000000000000000000000000000000000000000000000000000000000260017f0100000000000000000000000000000000000000000000000000000000000000026003548460405160200180857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050600080905060008090505b60038110156106de5760006001848e846003811015156105b057fe5b60200201518e856003811015156105c357fe5b60200201518e866003811015156105d657fe5b602002015160405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610632573d6000803e3d6000fd5b5050506020604051035190508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161180156106c25750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15156106cd57600080fd5b809250508080600101915050610594565b506001600054016000819055506000809050600080885160208a018b8d8af1905080151561070b57600080fd5b50505050505050505050505056fea165627a7a72305820d8c2ff351a38ab793bb7b934297389501c9aca6dcaf16041a0115a3441e1e8c20029"), BYZANTIUM)) </program>
          <programBytes> #parseByteStack("0x608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063aa5df9e21461005c578063affed0e0146100d7578063c2d067eb14610102575b600080fd5b34801561006857600080fd5b506100956004803603602081101561007f57600080fd5b81019080803590602001909291905050506102e2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100e357600080fd5b506100ec610320565b6040518082815260200191505060405180910390f35b34801561010e57600080fd5b506102e060048036036101c081101561012657600080fd5b8101908080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f820116905080830192505050505050919291929080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f820116905080830192505050505050919291929080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f8201169050808301925050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561023057600080fd5b82018360208201111561024257600080fd5b8035906020019184600183028401116401000000008311171561026457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610326565b005b6002818154811015156102f157fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061038c5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b151561039757600080fd5b60007f3ee892349ae4bbe61dce18f95115b5dc02daf49204cc602458cd4c1f540d56d7600102868686805190602001206000548787604051602001808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001975050505050505050604051602081830303815290604052805190602001209050600060197f01000000000000000000000000000000000000000000000000000000000000000260017f0100000000000000000000000000000000000000000000000000000000000000026003548460405160200180857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050600080905060008090505b60038110156106de5760006001848e846003811015156105b057fe5b60200201518e856003811015156105c357fe5b60200201518e866003811015156105d657fe5b602002015160405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610632573d6000803e3d6000fd5b5050506020604051035190508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161180156106c25750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15156106cd57600080fd5b809250508080600101915050610594565b506001600054016000819055506000809050600080885160208a018b8d8af1905080151561070b57600080fd5b50505050505050505050505056fea165627a7a72305820d8c2ff351a38ab793bb7b934297389501c9aca6dcaf16041a0115a3441e1e8c20029") </programBytes>
          <id> #CONTRACT_ID </id> // this
          <caller> MSG_SENDER </caller> // msg.sender
          <callData> #abiCallData2("execute(uint8[3],bytes32[3],bytes32[3],address,uint256,bytes,address,uint256)",
#uint8(SIGV0), #uint8(SIGV1), #uint8(SIGV2),
#bytes32(SIGR0), #bytes32(SIGR1), #bytes32(SIGR2),
#bytes32(SIGS0), #bytes32(SIGS1), #bytes32(SIGS2),
#address(DESTINATION_SB),
#uint256(VALUE_SB),
#bytes(#buf(DATA_LEN,DATA)),
#address(EXECUTOR_SB),
#uint256(GAS_LIMIT_SB)) </callData> // msg.data
          <callValue> 0 </callValue> // msg.value
          <wordStack> .WordStack => _ </wordStack>
          <localMem> .Map => _ </localMem>
          <pc> 0 => _ </pc>
          <gas> #gas(INITGAS, 0, 0) => _ </gas>
          <memoryUsed> 0 => _ </memoryUsed>
          <previousGas> _ => _ </previousGas>
          <static> false </static> // NOTE: non-static call
          <callDepth> CD </callDepth>
        </callState>
        <substate>
          <selfDestruct> _ </selfDestruct>
          <log> _ </log>
          <refund> _ => _ </refund>
        </substate>
        <gasPrice> _ </gasPrice>
        <origin> _ </origin> // tx.origin
        <previousHash> _ </previousHash>
        <ommersHash> _ </ommersHash>
        <coinbase> _ => _ </coinbase> // block.coinbase
        <stateRoot> _ </stateRoot>
        <transactionsRoot> _ </transactionsRoot>
        <receiptsRoot> _ </receiptsRoot>
        <logsBloom> _ </logsBloom>
        <difficulty> _ </difficulty>
        <number> BLOCK_NUM </number> // block.number
        <gasLimit> _ </gasLimit>
        <gasUsed> _ </gasUsed>
        <timestamp> NOW </timestamp> // now = block.timestamp
        <extraData> _ </extraData>
        <mixHash> _ </mixHash>
        <blockNonce> _ </blockNonce>
        <ommerBlockHeaders> _ </ommerBlockHeaders>
        <blockhash> BLOCK_HASHES </blockhash> // block.blockhash
      </evm>
      <network>
        <activeAccounts> SetItem(#CONTRACT_ID) SetItem(#CALLEE_ID) SetItem(1) _:Set </activeAccounts>
        <accounts>
          <account>
            <acctID> #CONTRACT_ID </acctID>
            <balance> CONTRACT_BAL </balance>
            <code> #parseByteStack("0x608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063aa5df9e21461005c578063affed0e0146100d7578063c2d067eb14610102575b600080fd5b34801561006857600080fd5b506100956004803603602081101561007f57600080fd5b81019080803590602001909291905050506102e2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100e357600080fd5b506100ec610320565b6040518082815260200191505060405180910390f35b34801561010e57600080fd5b506102e060048036036101c081101561012657600080fd5b8101908080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f820116905080830192505050505050919291929080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f820116905080830192505050505050919291929080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f8201169050808301925050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561023057600080fd5b82018360208201111561024257600080fd5b8035906020019184600183028401116401000000008311171561026457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610326565b005b6002818154811015156102f157fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061038c5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b151561039757600080fd5b60007f3ee892349ae4bbe61dce18f95115b5dc02daf49204cc602458cd4c1f540d56d7600102868686805190602001206000548787604051602001808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001975050505050505050604051602081830303815290604052805190602001209050600060197f01000000000000000000000000000000000000000000000000000000000000000260017f0100000000000000000000000000000000000000000000000000000000000000026003548460405160200180857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050600080905060008090505b60038110156106de5760006001848e846003811015156105b057fe5b60200201518e856003811015156105c357fe5b60200201518e866003811015156105d657fe5b602002015160405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610632573d6000803e3d6000fd5b5050506020604051035190508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161180156106c25750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15156106cd57600080fd5b809250508080600101915050610594565b506001600054016000819055506000809050600080885160208a018b8d8af1905080151561070b57600080fd5b50505050505050505050505056fea165627a7a72305820d8c2ff351a38ab793bb7b934297389501c9aca6dcaf16041a0115a3441e1e8c20029") </code>
            <storage>
S0 => S1
            </storage>
            <origStorage>
_
            </origStorage>
            <nonce> _ </nonce>
          </account>

          <account>
            <acctID> #CALLEE_ID </acctID>
            <balance> CALLEE_BAL </balance>
            <code> _ </code>
            <storage>
                _
            </storage>
            <origStorage>
                _
            </origStorage>
            <nonce> _ </nonce>
          </account>

          <account>
            // precompiled account for ECCREC
            <acctID> 1 </acctID>
            <balance> 0 </balance>
            <code> .WordStack </code>
            <storage> .Map </storage>
            <origStorage> .Map </origStorage>
            <nonce> 0 </nonce>
          </account>


          ...
        </accounts>
        <txOrder> _ </txOrder>
        <txPending> _ </txPending>
        <messages> _ </messages>
      </network>
    </ethereum>
    requires
     #rangeAddress(#CONTRACT_ID)
     andBool #rangeAddress(#CALLEE_ID)
     andBool #rangeUInt(256, NOW)
     andBool #rangeUInt(128, BLOCK_NUM) // Solidity

     // Account address normality
     andBool #CONTRACT_ID  >Int 0 andBool (notBool #CONTRACT_ID  in #precompiledAccounts(BYZANTIUM))
     andBool #CALLEE_ID  >Int 0 andBool (notBool #CALLEE_ID  in #precompiledAccounts(BYZANTIUM))

andBool #rangeUInt(256, CONTRACT_BAL)
andBool #range(0 <= CD < 1024)
andBool #rangeAddress(MSG_SENDER)
andBool #rangeAddress(DESTINATION_SB)
andBool #rangeUInt(256, VALUE_SB)
andBool #rangeUInt(256, DATA_LEN)
andBool DATA_LEN <Int 2 ^Int 16
andBool #rangeAddress(EXECUTOR_SB)
andBool #rangeUInt(256, GAS_LIMIT_SB)

andBool select(S0, #hashedLocation("Solidity", 3, .IntList)) ==Int DOMAIN_SEPARATOR
andBool #rangeBytes(32, DOMAIN_SEPARATOR)

andBool select(S0, #hashedLocation("Solidity", 0, .IntList)) ==Int NONCE_0
andBool #rangeUInt(256, NONCE_0)

andBool #rangeUInt(8, SIGV0)
andBool #rangeUInt(8, SIGV1)
andBool #rangeUInt(8, SIGV2)
andBool #rangeBytes(32, SIGR0)
andBool #rangeBytes(32, SIGR1)
andBool #rangeBytes(32, SIGR2)
andBool #rangeBytes(32, SIGS0)
andBool #rangeBytes(32, SIGS1)
andBool #rangeBytes(32, SIGS2)
andBool (EXECUTOR_SB ==Int MSG_SENDER orBool EXECUTOR_SB ==Int 0)
andBool TX_INPUT_HASH ==Int keccak(#encodeArgs(
#bytes32(#parseHexWord("0x3ee892349ae4bbe61dce18f95115b5dc02daf49204cc602458cd4c1f540d56d7")),
#address(DESTINATION_SB),
#uint256(VALUE_SB),
#bytes32(keccak(#buf(DATA_LEN,DATA))),
#uint256(NONCE_0),
#address(EXECUTOR_SB),
#uint256(GAS_LIMIT_SB)
))
andBool TX_TOTAL_HASH ==Int keccak(25 : 1 :
#encodeArgs(
#bytes32(DOMAIN_SEPARATOR),
#bytes32(TX_INPUT_HASH)
))
andBool ECREC_DATA0 ==K #encodeArgs( #bytes32(TX_TOTAL_HASH), #uint8(SIGV0), #bytes32(SIGR0), #bytes32(SIGS0) )
andBool ECREC_DATA1 ==K #encodeArgs( #bytes32(TX_TOTAL_HASH), #uint8(SIGV1), #bytes32(SIGR1), #bytes32(SIGS1) )
andBool ECREC_DATA2 ==K #encodeArgs( #bytes32(TX_TOTAL_HASH), #uint8(SIGV2), #bytes32(SIGR2), #bytes32(SIGS2) )
andBool RECOVERED0 ==Int #symEcrec( ECREC_DATA0 )
andBool RECOVERED1 ==Int #symEcrec( ECREC_DATA1 )
andBool RECOVERED2 ==Int #symEcrec( ECREC_DATA2 )
andBool notBool #ecrecEmpty( ECREC_DATA0 )
andBool notBool #ecrecEmpty( ECREC_DATA1 )
andBool notBool #ecrecEmpty( ECREC_DATA2 )
andBool #rangeAddress(RECOVERED0)
andBool #rangeAddress(RECOVERED1)
andBool #rangeAddress(RECOVERED2)

andBool IS_OWNER0 ==Int select(S0, #hashedLocation("Solidity", 1, RECOVERED0))
andBool IS_OWNER1 ==Int select(S0, #hashedLocation("Solidity", 1, RECOVERED1))
andBool IS_OWNER2 ==Int select(S0, #hashedLocation("Solidity", 1, RECOVERED2))
andBool #rangeUInt(8, IS_OWNER0)
andBool #rangeUInt(8, IS_OWNER1)
andBool #rangeUInt(8, IS_OWNER2)
andBool IS_OWNER0 =/=Int 0
andBool IS_OWNER1 =/=Int 0
andBool IS_OWNER2 =/=Int 0
andBool RECOVERED0 <Int RECOVERED1
andBool RECOVERED1 <Int RECOVERED2

andBool NONCE_0 ==Int select(S0, #hashedLocation("Solidity", 0, .IntList))
andBool NONCE_0 <Int 2 ^Int 256 -Int 1
andBool NONCE_0 >=Int 0
andBool DESTINATION_SB ==K #CALLEE_ID
andBool #callSuccess
    ensures true
andBool S0 ==IMap S1 except (SetItem(#hashedLocation("Solidity", 0, .IntList)) .Set)
andBool NONCE_1 ==Int select(S1, #hashedLocation("Solidity", 0, .IntList))
andBool NONCE_1 >Int NONCE_0
andBool #callInvoked



endmodule


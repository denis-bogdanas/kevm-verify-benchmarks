[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
balance: _
storage: M
origstorage: _
nonce: _
;callee
callee_bal: CALLEE_BAL
callee_storage: _
callee_origstorage: _
callee_nonce: _
callee_code: _
;origin
requires:
    
ensures:
attribute:

[get]
k: (#execute => #halt) ~> _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData2("get(uint8[{THRESHOLD}],bytes32[{THRESHOLD}],bytes32[{THRESHOLD}],bytes,bytes32)",
                            #uint8(SIGV0), #uint8(SIGV1), #uint8(SIGV2),
                            #bytes32(SIGR0), #bytes32(SIGR1), #bytes32(SIGR2),
                            #bytes32(SIGS0), #bytes32(SIGS1), #bytes32(SIGS2),
                            #bytes(#buf(DATA_LEN,DATA)),
                            #bytes32(HASH))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _
coinbase: _ => _
+requires:
            andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)
            andBool #rangeBytes(32, HASH)
            andBool #rangeUInt(8, SIGV0)
            andBool #rangeUInt(8, SIGV1)
            andBool #rangeUInt(8, SIGV2)
            andBool #rangeBytes(32, SIGR0)
            andBool #rangeBytes(32, SIGR1)
            andBool #rangeBytes(32, SIGR2)
            andBool #rangeBytes(32, SIGS0)
            andBool #rangeBytes(32, SIGS1)
            andBool #rangeBytes(32, SIGS2)

            andBool #rangeUInt(256, DATA_LEN)
            andBool DATA_LEN <Int 2 ^Int 16

            andBool ECREC_DATA0 ==K #encodeArgs( #bytes32(HASH), #uint8(SIGV0), #bytes32(SIGR0), #bytes32(SIGS0) )
            andBool ECREC_DATA1 ==K #encodeArgs( #bytes32(HASH), #uint8(SIGV1), #bytes32(SIGR1), #bytes32(SIGS1) )
            andBool ECREC_DATA2 ==K #encodeArgs( #bytes32(HASH), #uint8(SIGV2), #bytes32(SIGR2), #bytes32(SIGS2) )


[get-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #encodeArgs(#uint256(5))
+requires:
    andBool RECOVERED0 ==Int #symEcrec( ECREC_DATA0 )
    andBool notBool #ecrecEmpty( ECREC_DATA0 )
    andBool RECOVERED1 ==Int #symEcrec( ECREC_DATA1 )
    andBool notBool #ecrecEmpty( ECREC_DATA1 )
    andBool RECOVERED2 ==Int #symEcrec( ECREC_DATA2 )
    andBool notBool #ecrecEmpty( ECREC_DATA2 )
    andBool RECOVERED0 <Int RECOVERED1
    andBool RECOVERED1 <Int RECOVERED2

[get-failure-0]
statusCode: _ => EVMC_REVERT
output: _ => _
+requires:
    andBool #ecrecEmpty( ECREC_DATA0 )


[get-failure-1]
statusCode: _ => EVMC_REVERT
output: _ => _
+requires:
    andBool #ecrecEmpty( ECREC_DATA1 )

[get-failure-2]
statusCode: _ => EVMC_REVERT
output: _ => _
+requires:
    andBool #ecrecEmpty( ECREC_DATA2 )


[get-failure-order]
statusCode: _ => EVMC_REVERT
output: _ => _
+requires:
    andBool RECOVERED0 ==Int #symEcrec( ECREC_DATA0 )
    andBool notBool #ecrecEmpty( ECREC_DATA0 )
    andBool RECOVERED1 ==Int #symEcrec( ECREC_DATA1 )
    andBool notBool #ecrecEmpty( ECREC_DATA1 )
    andBool RECOVERED2 ==Int #symEcrec( ECREC_DATA2 )
    andBool notBool #ecrecEmpty( ECREC_DATA2 )
    andBool (RECOVERED0 >=Int RECOVERED1 orBool RECOVERED1 >=Int RECOVERED2)

[pgm]
compiler: "Solidity"

nonce_slot = 0

threshold = 3

contract_code: "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360751f6a14610046575b600080fd5b34801561005257600080fd5b506101da600480360361016081101561006a57600080fd5b8101908080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f820116905080830192505050505050919291929080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f820116905080830192505050505050919291929080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019064010000000081111561014a57600080fd5b82018360208201111561015c57600080fd5b8035906020019184600183028401116401000000008311171561017e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506101f0565b6040518082815260200191505060405180910390f35b600080600090505b60038110156102eb576000600184898460038110151561021457fe5b6020020151898560038110151561022757fe5b6020020151898660038110151561023a57fe5b602002015160405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610296573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161115156102dd57600080fd5b5080806001019150506101f8565b50600590509594505050505056fea165627a7a723058206722324ab513e0d9d33b96a540165e189aeb9b61a2a49a5d8aecde11a398dfb50029"
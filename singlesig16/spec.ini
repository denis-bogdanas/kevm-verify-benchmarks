;root eDSL rule from all other eDSL rules extend
[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(#CALLEE_ID) SetItem(1) _:Set
accounts:
;contract
contract_bal: CONTRACT_BAL
contract_storage: S0
contract_origstorage: _
contract_nonce: _

callee_bal: CALLEE_BAL
callee_storage: _
callee_origstorage: _
callee_nonce: _
callee_code: _

;origin
requires:
    andBool #rangeUInt(256, CONTRACT_BAL)
ensures:
attribute:


;eDSL rule for external contract function called get5
[execute]
k: (#execute => #halt) ~> _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData("execute",
                            #uint8(SIGV),
                            #bytes32(SIGR),
                            #bytes32(SIGS),
                            #address(DESTINATION),
                            #uint256(VALUE),
                            #bytes(#buf(DATA_LEN, DATA)),
                            #address(EXECUTOR),
                            #uint256(GAS_LIMIT) )
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _ => _
coinbase: _ => _
+requires:
            andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)
            andBool #rangeAddress(DESTINATION)
            andBool #rangeUInt(256, VALUE)
            andBool #rangeUInt(256, DATA_LEN)
            andBool DATA_LEN <Int 2 ^Int 16
            andBool #rangeAddress(EXECUTOR)
            andBool #rangeUInt(256, GAS_LIMIT)

            andBool select(S0, #hashedLocation({COMPILER}, {DOMAIN_SEPARATOR_SLOT}, .IntList)) ==Int DOMAIN_SEPARATOR
            andBool #rangeBytes(32, DOMAIN_SEPARATOR)

            andBool select(S0, #hashedLocation({COMPILER}, {NONCE_SLOT}, .IntList)) ==Int NONCE_0
            andBool #rangeUInt(256, NONCE_0)

            andBool #rangeUInt(8, SIGV)
            andBool #rangeBytes(32, SIGR)
            andBool #rangeBytes(32, SIGS)

[execute-executor-invalid]
statusCode: _ => EVMC_REVERT
output: _ => _
+requires:
            andBool EXECUTOR =/=Int MSG_SENDER
            andBool EXECUTOR =/=Int 0

[execute-executor-valid]
+requires:
            andBool (EXECUTOR ==Int MSG_SENDER orBool EXECUTOR ==Int 0)
            andBool TX_INPUT_HASH ==Int keccak(#encodeArgs(
                        #bytes32(#parseHexWord({TXTYPE_HASH})),
                        #address(DESTINATION),
                        #uint256(VALUE),
                        #bytes32(keccak(#buf(DATA_LEN,DATA))),
                        #uint256(NONCE_0),
                        #address(EXECUTOR),
                        #uint256(GAS_LIMIT)
                       ))
            andBool TX_TOTAL_HASH ==Int keccak(#encodeArgs(
                        #uint256(25),
                        #uint256(1),
                        #bytes32(DOMAIN_SEPARATOR),
                        #bytes32(TX_INPUT_HASH)
                       ))
            andBool ECREC_DATA ==K #encodeArgs( #bytes32(TX_TOTAL_HASH), #uint8(SIGV), #bytes32(SIGR), #bytes32(SIGS) )


[execute-executor-valid-sigcheck-fail]
statusCode: _ => EVMC_REVERT
output: _ => _
+requires:
    andBool #ecrecEmpty( ECREC_DATA )

[execute-executor-valid-sigcheck-pass]
+requires:
    andBool RECOVERED ==Int #symEcrec( ECREC_DATA )
    andBool notBool #ecrecEmpty( ECREC_DATA )
    andBool #rangeAddress(RECOVERED)

[execute-executor-valid-sigcheck-pass-ownercheck-fail]
statusCode: _ => EVMC_REVERT
output: _ => _
+requires:
    andBool IS_OWNER ==Int select(S0, #hashedLocation({COMPILER}, {IS_OWNER_MAPPING_SLOT}, RECOVERED))
    andBool #rangeUInt(8, IS_OWNER)
    andBool IS_OWNER ==Int 0

[execute-executor-valid-sigcheck-pass-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #encodeArgs(#address(RECOVERED))
contract_storage: S0 => S1
+requires:
    andBool NONCE_0 ==Int select(S0, #hashedLocation({COMPILER}, {NONCE_SLOT}, .IntList))
    andBool NONCE_0 <Int 2 ^Int 256 -Int 1
    andBool NONCE_0 >=Int 0
+ensures:
    andBool S0 ==IMap S1 except (SetItem(#hashedLocation({COMPILER}, {NONCE_SLOT}, .IntList)) .Set)
    andBool NONCE_1 ==Int select(S1, #hashedLocation({COMPILER}, {NONCE_SLOT}, .IntList))
    andBool NONCE_1 ==Int NONCE_0 +Int 1


[pgm]
compiler: "Solidity"

nonce_slot = 0

is_owner_mapping_slot = 1

txtype_hash = "0x3ee892349ae4bbe61dce18f95115b5dc02daf49204cc602458cd4c1f540d56d7"

domain_separator_slot = 3

contract_code: "0x608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313c01cb914610059578063aa5df9e214610151578063affed0e0146101be575b005b34801561006557600080fd5b5061010f600480360381019080803560ff16906020019092919080356000191690602001909291908035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001919091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506101e9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561015d57600080fd5b5061017c600480360381019080803590602001909291905050506105a8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ca57600080fd5b506101d36105e6565b6040518082815260200191505060405180910390f35b60008060008060003373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614806102575750600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16145b151561026257600080fd5b7f3ee892349ae4bbe61dce18f95115b5dc02daf49204cc602458cd4c1f540d56d76001028b8b8b8b6040518083838082843782019150509250505060405180910390206000548b8b6040516020018088600019166000191681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185600019166000191681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019750505050505050506040516020818303038152906040526040518082805190602001908083835b602083101515610390578051825260208201915060208101905060208303925061036b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209350601960016003548660405160200180858152602001848152602001836000191660001916815260200182600019166000191681526020019450505050506040516020818303038152906040526040518082805190602001908083835b602083101515610440578051825260208201915060208101905060208303925061041b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209250600091506001838f8f8f604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af11580156104ea573d6000803e3d6000fd5b5050506020604051035190508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1611801561057a5750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561058557600080fd5b809150600160005401600081905550809450505050509998505050505050505050565b6002818154811015156105b757fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600054815600a165627a7a72305820bf0658966e55774cd25c347ef52886f28d8fa60a536b5c5a2c9dc606a7a523aa0029"
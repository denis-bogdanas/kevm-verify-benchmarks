;root eDSL rule from all other eDSL rules extend
[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
contract_bal: CONTRACT_BAL
contract_storage: _
contract_origstorage: _
contract_nonce: _
;origin
requires:
    andBool #rangeUInt(256, CONTRACT_BAL)
ensures:
attribute:


;eDSL rule for external contract function called getx
[get5ifeq]
k: (#execute => #halt) ~> _
output: _ => _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData("get5ifeq", #array(#uint256(_), XARR_LEN, _))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
contract_storage: S
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _
coinbase: _ => _
+requires:  andBool Y ==Int select(S, #hashedLocation({COMPILER}, {Y_STORAGE_OFFSET}, .IntList))
            andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)
            andBool #rangeUInt(256, XARR_LEN)
            andBool #rangeUInt(256, Y)


[get5ifeq-xleneqy]
output: _ => #encodeArgs(#uint256(5))
statusCode: _ => EVMC_SUCCESS
+requires: andBool XARR_LEN ==Int Y


[get5ifeq-xlenneqy]
statusCode: _ => EVMC_REVERT
+requires: andBool XARR_LEN =/=Int Y

[pgm]
compiler: "Solidity"

contract_code: "0x6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631e7784a014604e578063a56dfe4a14609a575b600080fd5b348015605957600080fd5b50608460048036038101908080359060200190820180359060200191909192939192939050505060c2565b6040518082815260200191505060405180910390f35b34801560a557600080fd5b5060ac60df565b6040518082815260200191505060405180910390f35b600080548383905014151560d557600080fd5b6005905092915050565b600054815600a165627a7a72305820cfa737757dd32ec4e99703e375c1d40233618a2cf63dc471fdacb1cf7d3b15a90029"

y_storage_offset: 0
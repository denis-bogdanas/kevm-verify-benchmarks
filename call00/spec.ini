;root eDSL rule from all other eDSL rules extend
[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
contract_bal: CONTRACT_BAL
contract_storage: _
contract_origstorage: _
contract_nonce: _
;origin
requires:
    andBool #rangeUInt(256, CONTRACT_BAL)
ensures:
attribute:

[execute-success]
k: (#execute => #halt) ~> _
statusCode: _ => EVMC_SUCCESS
output: _ => _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData("execute", (
                            #address(DESTINATION),
                            #uint256(GAS_LIMIT)
                            ))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _
coinbase: _ => _
+requires:
            andBool #range(0 <= CD < 1023)
            andBool #rangeAddress(MSG_SENDER)
            andBool #rangeAddress(DESTINATION)
            andBool #rangeUInt(256, GAS_LIMIT)
            andBool #range(0 <= #sizeWordStack(WS) <= 1000)

[pgm]
compiler: "Solidity"

contract_code: "0x608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633b89bb86146044575b600080fd5b348015604f57600080fd5b50608c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505060a6565b604051808215151515815260200191505060405180910390f35b6000806000905060008060008060008888f1905080915050929150505600a165627a7a7230582010ed575e12bd90994ca7cf3c7a9c5ce7d91943d5619735bd893612f81867c64d0029"
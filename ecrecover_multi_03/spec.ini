[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
contract_bal: CONTRACT_BAL
contract_storage: M
contract_origstorage: _
contract_nonce: _
;callee
callee_bal: CALLEE_BAL
callee_storage: _
callee_origstorage: _
callee_nonce: _
callee_code: _
;origin
requires:
    andBool #rangeUInt(256, CONTRACT_BAL)
ensures:
attribute:

[get]
k: (#execute => #halt) ~> _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData("get", #bytes32(HASH), #staticarray1(#uint8(_), {THRESHOLD}, #uint8(SIGV0), #uint8(SIGV1), #uint8(SIGV2)),
                                                #staticarray1(#bytes32(_), {THRESHOLD}, #bytes32(SIGR0), #bytes32(SIGR1), #bytes32(SIGR2)),
                                                #staticarray1(#bytes32(_), {THRESHOLD}, #bytes32(SIGS0), #bytes32(SIGS1), #bytes32(SIGS2)))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _
coinbase: _ => _
+requires:
            andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)
            andBool #rangeBytes(32, HASH)
            andBool #rangeUInt(8, SIGV0)
            andBool #rangeUInt(8, SIGV1)
            andBool #rangeUInt(8, SIGV2)
            andBool #rangeBytes(32, SIGR0)
            andBool #rangeBytes(32, SIGR1)
            andBool #rangeBytes(32, SIGR2)
            andBool #rangeBytes(32, SIGS0)
            andBool #rangeBytes(32, SIGS1)
            andBool #rangeBytes(32, SIGS2)

            andBool ECREC_DATA0 ==K #encodeArgs( #bytes32(HASH), #uint8(SIGV0), #bytes32(SIGR0), #bytes32(SIGS0) )
            andBool ECREC_DATA1 ==K #encodeArgs( #bytes32(HASH), #uint8(SIGV1), #bytes32(SIGR1), #bytes32(SIGS1) )
            andBool ECREC_DATA2 ==K #encodeArgs( #bytes32(HASH), #uint8(SIGV2), #bytes32(SIGR2), #bytes32(SIGS2) )

[get-recovered]
+requires:
    andBool notBool #ecrecEmpty( ECREC_DATA0 )
    andBool notBool #ecrecEmpty( ECREC_DATA1 )
    andBool notBool #ecrecEmpty( ECREC_DATA2 )
    andBool RECOVERED0 ==Int #symEcrec( ECREC_DATA0 )
    andBool RECOVERED1 ==Int #symEcrec( ECREC_DATA1 )
    andBool RECOVERED2 ==Int #symEcrec( ECREC_DATA2 )

[get-recovered-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #encodeArgs(#uint256(5))
+requires:
    andBool RECOVERED0 <Int RECOVERED1
    andBool RECOVERED1 <Int RECOVERED2

[get-unrecovered]
statusCode: _ => EVMC_REVERT
output: _ => _

[get-unrecovered-0]
+requires:
    andBool #ecrecEmpty( ECREC_DATA0 )

[get-unrecovered-1]
+requires:
    andBool #ecrecEmpty( ECREC_DATA1 )

[get-unrecovered-2]
+requires:
    andBool #ecrecEmpty( ECREC_DATA2 )

[get-recovered-unsorted]
statusCode: _ => EVMC_REVERT
output: _ => _

[get-recovered-unsorted-0]
+requires:
    andBool RECOVERED0 >=Int RECOVERED1

[get-recovered-unsorted-1]
+requires:
    andBool RECOVERED1 >=Int RECOVERED2

[pgm]
compiler: "Solidity"

nonce_slot = 0

threshold = 3

contract_code: "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636b3a9f6114610046575b600080fd5b34801561005257600080fd5b50610143600480360361014081101561006a57600080fd5b810190808035906020019092919080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f820116905080830192505050505050919291929080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f820116905080830192505050505050919291929080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610159565b6040518082815260200191505060405180910390f35b6000806000905060008090505b600381101561025b576000600188888460038110151561018257fe5b6020020151888560038110151561019557fe5b602002015188866003811015156101a857fe5b602002015160405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610204573d6000803e3d6000fd5b5050506020604051035190508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1611151561024a57600080fd5b809250508080600101915050610166565b50600591505094935050505056fea165627a7a72305820221b0925da9f5fcf3bf16b841a7da5792712807c464a5ad82a871323f059f20e0029"
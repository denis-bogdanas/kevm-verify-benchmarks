;root eDSL rule from all other eDSL rules extend
[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
contract_bal: CONTRACT_BAL
contract_storage: _
contract_origstorage: _
contract_nonce: _
;origin
requires:
    andBool #rangeUInt(256, CONTRACT_BAL)
ensures:
attribute:


;eDSL rule for external contract function called getx
[getLength]
k: (#execute => #halt) ~> _
statusCode: _ => EVMC_SUCCESS
output: _ => #encodeArgs(#uint256(Z_LEN))
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData("getLength", #array(#uint256(_), X_LEN, _), #array(#uint256(_), Z_LEN, _))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _
coinbase: _ => _
+requires:  andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)
            andBool #rangeUInt(256, X_LEN)
            andBool #rangeUInt(256, Z_LEN)


[pgm]
compiler: "Solidity"

contract_code: "0x608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063734628d7146044575b600080fd5b348015604f57600080fd5b50609260048036038101908080359060200190820180359060200191909192939192939080359060200190820180359060200191909192939192939050505060a8565b6040518082815260200191505060405180910390f35b60008282905090509493505050505600a165627a7a723058205cf45980f1a3dcaca065ef13693cbc8d936d9a55d0408e03c509ceeeb020b08d0029"
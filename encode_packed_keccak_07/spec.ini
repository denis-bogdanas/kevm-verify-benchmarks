;root eDSL rule from all other eDSL rules extend
[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
contract_bal: CONTRACT_BAL
contract_storage: M
contract_origstorage: _
contract_nonce: _

callee_bal: CALLEE_BAL
callee_storage: _
callee_origstorage: _
callee_nonce: _
callee_code: _

;origin
requires:
    andBool #rangeUInt(256, CONTRACT_BAL)
ensures:
attribute:

[execute]
k: (#execute => #halt) ~> _
statusCode: _ => EVMC_SUCCESS
output: _ => #encodeArgs(#bytes32(TX_TOTAL_HASH))
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData("execute",
                            #bytes(#buf(DATA_LEN, DATA)),
                            #uint256(GAS_LIMIT) )
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _
coinbase: _ => _
+requires:
            andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)
            andBool #rangeUInt(256, DATA_LEN)
            andBool DATA_LEN <Int 2 ^Int 16
            andBool #rangeUInt(256, GAS_LIMIT)

            andBool TX_INPUT_HASH ==Int keccak(#encodeArgs(
                        #bytes32(keccak(#buf(DATA_LEN,DATA))),
                        #uint256(GAS_LIMIT)))

            andBool TX_TOTAL_HASH ==Int keccak(25 : 1 : #encodeArgs(
                        #bytes32(TX_INPUT_HASH)
                       ))
[pgm]
compiler: "Solidity"

domain_separator_slot = 0

contract_code: "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063ab5898e814610046575b600080fd5b34801561005257600080fd5b50610089600480360381019080803590602001908201803590602001919091929391929390803590602001909291905050506100a7565b60405180826000191660001916815260200191505060405180910390f35b6000806000858560405180838380828437820191505092505050604051809103902084604051602001808360001916600019168152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561012d5780518252602082019150602081019050602083039250610108565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915060197f01000000000000000000000000000000000000000000000000000000000000000260017f0100000000000000000000000000000000000000000000000000000000000000028360405160200180847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101826000191660001916815260200193505050506040516020818303038152906040526040518082805190602001908083835b6020831015156102975780518252602082019150602081019050602083039250610272565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050809250505093925050505600a165627a7a723058204da8e81a752d8cf8acb2331fa69ae994b9af47a88c917e498348b7e0017b0f1d0029"
{"format":"KAST","version":1,"term":{"node":"KRewrite","lhs":{"node":"KApply","label":"<generatedTop>","variable":false,"arity":6,"args":[{"node":"KApply","label":"<k>","variable":false,"arity":1,"args":[{"node":"KApply","label":"#KSequence","variable":false,"arity":2,"args":[{"node":"KApply","label":"____EVM","variable":false,"arity":3,"args":[{"node":"KApply","label":"EQ_EVM","variable":false,"arity":0,"args":[]},{"node":"KVariable","name":"_2192","originalName":"W0"},{"node":"KVariable","name":"_2193","originalName":"W1"}]},{"node":"KVariable","name":"_2191","originalName":"DotVar1"}]}]},{"node":"KVariable","name":"_2194","originalName":"_0"},{"node":"KVariable","name":"_2195","originalName":"_1"},{"node":"KVariable","name":"_2196","originalName":"_2"},{"node":"KVariable","name":"_2197","originalName":"_3"},{"node":"KVariable","name":"_2198","originalName":"_4"}]},"rhs":{"node":"KApply","label":"<generatedTop>","variable":false,"arity":6,"args":[{"node":"KApply","label":"<k>","variable":false,"arity":1,"args":[{"node":"KApply","label":"#KSequence","variable":false,"arity":2,"args":[{"node":"KApply","label":"bool2Word","variable":false,"arity":1,"args":[{"node":"KApply","label":"_==K_","variable":false,"arity":2,"args":[{"node":"KVariable","name":"_2192","originalName":"W0"},{"node":"KVariable","name":"_2193","originalName":"W1"}]}]},{"node":"KApply","label":"#KSequence","variable":false,"arity":2,"args":[{"node":"KApply","label":"#push_EVM","variable":false,"arity":0,"args":[]},{"node":"KVariable","name":"_2191","originalName":"DotVar1"}]}]}]},{"node":"KVariable","name":"_2194","originalName":"_0"},{"node":"KVariable","name":"_2195","originalName":"_1"},{"node":"KVariable","name":"_2196","originalName":"_2"},{"node":"KVariable","name":"_2197","originalName":"_3"},{"node":"KVariable","name":"_2198","originalName":"_4"}]},"att":"[contentStartColumn(8) contentStartLine(12) org.kframework.attributes.Location(Location(12,8,12,64)) org.kframework.attributes.Source(Source(/home/sbugrara/kevm-verify-benchmarks/simple00/generated-klab/specs/abstract-semantics.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) specification() trusted()]"}}

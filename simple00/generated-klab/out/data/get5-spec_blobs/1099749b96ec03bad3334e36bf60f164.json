{"format":"KAST","version":1,"term":{"node":"KToken","sort":"Z3Query","token":"; (set-option :auto-config false)\n; (set-option :smt.mbqi false)\n; (set-option :smt.array.extensional false)\n\n; int extra\n(define-fun int_max ((x Int) (y Int)) Int (ite (< x y) y x))\n(define-fun int_min ((x Int) (y Int)) Int (ite (< x y) x y))\n(define-fun int_abs ((x Int)) Int (ite (< x 0) (- 0 x) x))\n\n; bool to int\n(define-fun smt_bool2int ((b Bool)) Int (ite b 1 0))\n\n; ceil32\n(define-fun ceil32 ((x Int)) Int ( * ( div ( + x 31 ) 32 ) 32 ) )\n\n(declare-sort WordStack)\n(declare-sort Map)\n(declare-fun asByteStack (Int WordStack) WordStack)\n(declare-fun asWord (WordStack) Int)\n(declare-fun bufSeg (WordStack Int Int) WordStack)\n(declare-fun fii (WordStack Int WordStack Map Int) Int)\n(declare-fun isValid (WordStack Int Int WordStack Map Int Bool) Bool)\n(declare-fun isValidSig (WordStack Int Int WordStack Map Int) Bool)\n(declare-fun isValidSignature (Int WordStack WordStack) Bool)\n(declare-fun sizeWordStack (WordStack) Int)\n(declare-fun _dotWS () WordStack)\n(declare-fun _plusWS_ (WordStack WordStack) WordStack)\n(declare-fun _WS_ (Int WordStack) WordStack)\n(declare-fun chop (Int) Int)\n(declare-fun smt_hash1 (Int) Int)\n(declare-fun smt_hash2 (Int Int) Int)\n(declare-fun smt_keccak (WordStack) Int)\n(declare-fun smt_nthbyteof (Int Int Int) Int)\n(declare-fun selectInt (Map Int) Int)\n(declare-fun selectRange (Map Int Int) WordStack)\n(declare-fun sizeWordStackAux (WordStack Int) Int)\n(declare-fun storeInt (Map Int Int) Map)\n(declare-fun storeRange (Map Int Int WordStack) Map)\n(assert (forall ((|R_I_702| Int)) (= (chop |R_I_702|) (mod |R_I_702| 115792089237316195423570985008687907853269984665640564039457584007913129639936))))\n(assert (forall ((|R__455_1858| WordStack)(|R__456_1859| Int)) (= (<= 0 (sizeWordStackAux |R__455_1858| |R__456_1859|)) true)))\n(declare-fun |W0| () Int)\n(declare-fun |W1| () Int)\n(assert (and\n  true\n  (not (and\n\t(= (<= |W0| |W1|) true)))\n))\n(check-sat-using (or-else (using-params smt :random-seed 3 :timeout 1000) (using-params smt :random-seed 2 :timeout 2000) (using-params smt :random-seed 1)))\n"}}

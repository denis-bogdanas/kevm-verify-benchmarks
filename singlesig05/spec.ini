;root eDSL rule from all other eDSL rules extend
[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
contract_bal: CONTRACT_BAL
contract_storage: M
contract_origstorage: _
contract_nonce: _
;origin
requires:
    andBool #rangeUInt(256, CONTRACT_BAL)
ensures:
attribute:


;eDSL rule for external contract function called get5
[execute]
k: (#execute => #halt) ~> _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData("execute",
                            #uint8(_),
                            #bytes32(_),
                            #bytes32(_),
                            #address(DESTINATION),
                            #uint256(VALUE),
                            #bytes(#buf(DATA_LEN, DATA)),
                            #address(EXECUTOR),
                            #uint256(GAS_LIMIT) )
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _
coinbase: _ => _
+requires:
            andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)
            andBool #rangeAddress(DESTINATION)
            andBool #rangeUInt(256, VALUE)
            andBool #rangeUInt(256, DATA_LEN)
            andBool DATA_LEN <Int 2 ^Int 16
            andBool #rangeAddress(EXECUTOR)
            andBool #rangeUInt(256, GAS_LIMIT)

            andBool select(M, #hashedLocation({COMPILER}, {DOMAIN_SEPARATOR_SLOT}, .IntList)) ==Int DOMAIN_SEPARATOR
            andBool #rangeBytes(32, DOMAIN_SEPARATOR)

            andBool select(M, #hashedLocation({COMPILER}, {NONCE_SLOT}, .IntList)) ==Int NONCE
            andBool #rangeUInt(256, NONCE)

[execute-executor-invalid]
statusCode: _ => EVMC_REVERT
output: _ => _
+requires:
            andBool EXECUTOR =/=Int MSG_SENDER
            andBool EXECUTOR =/=Int 0

[execute-executor-valid]
statusCode: _ => EVMC_SUCCESS
output: _ => #encodeArgs(#bytes32(TX_INPUT_HASH))
+requires:
            andBool (EXECUTOR ==Int MSG_SENDER orBool EXECUTOR ==Int 0)
            andBool TX_INPUT_HASH ==Int keccak(#encodeArgs(
                        #bytes32(#parseHexWord({TXTYPE_HASH})),
                        #address(DESTINATION),
                        #uint256(VALUE),
                        #bytes32(keccak(#buf(DATA_LEN,DATA)))
                       ))
[pgm]
compiler: "Solidity"

nonce_slot = 5

txtype_hash = "0x3ee892349ae4bbe61dce18f95115b5dc02daf49204cc602458cd4c1f540d56d7"

domain_separator_slot = 8

contract_code: "0x608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313c01cb914610059578063aa5df9e21461012d578063affed0e01461019a575b005b34801561006557600080fd5b5061010f600480360381019080803560ff16906020019092919080356000191690602001909291908035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001919091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506101c5565b60405180826000191660001916815260200191505060405180910390f35b34801561013957600080fd5b5061015860048036038101908080359060200190929190505050610361565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101a657600080fd5b506101af61039f565b6040518082815260200191505060405180910390f35b6000803373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061022e5750600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b151561023957600080fd5b7f3ee892349ae4bbe61dce18f95115b5dc02daf49204cc602458cd4c1f540d56d7600102888888886040518083838082843782019150509250505060405180910390206040516020018085600019166000191681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182600019166000191681526020019450505050506040516020818303038152906040526040518082805190602001908083835b60208310151561032157805182526020820191506020810190506020830392506102fc565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050809150509998505050505050505050565b60028181548110151561037057fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600054815600a165627a7a72305820f7eb09e9ce3a2f494b6ace26bba1f4f6d634a56e725001bb702cdf70353e72d90029"
;root eDSL rule from all other eDSL rules extend
[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
balance: _
storage: _
origstorage: _
nonce: _
;callee
callee_bal: CALLEE_BAL
callee_storage: _
callee_origstorage: _
callee_nonce: _
callee_code: _
;origin
requires:
    
ensures:
attribute:


;eDSL rule for external contract function called get5
[execute]
k: (#execute => #halt) ~> _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData("execute",
                            #uint8(_),
                            #bytes32(_),
                            #bytes32(_),
                            #address(_),
                            #uint256(_),
                            #bytes(_),
                            #address(EXECUTOR),
                            #uint256(_) )
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _
coinbase: _ => _
+requires:
            andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)
            andBool #rangeAddress(EXECUTOR)

[execute-executor-invalid]
statusCode: _ => EVMC_REVERT
output: _ => _
+requires:
            andBool EXECUTOR =/=Int MSG_SENDER
            andBool EXECUTOR =/=Int 0

[execute-executor-valid]
statusCode: _ => EVMC_SUCCESS
output: _ => #encodeArgs(#uint256(5))
+requires:
            andBool (EXECUTOR ==Int MSG_SENDER orBool EXECUTOR ==Int 0)

[pgm]
compiler: "Solidity"

contract_code: "0x608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313c01cb914610059578063aa5df9e214610125578063affed0e014610192575b005b34801561006557600080fd5b5061010f600480360381019080803560ff16906020019092919080356000191690602001909291908035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001919091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506101bd565b6040518082815260200191505060405180910390f35b34801561013157600080fd5b50610150600480360381019080803590602001909291905050506103a0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561019e57600080fd5b506101a76103de565b6040518082815260200191505060405180910390f35b6000803373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806102265750600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b151561023157600080fd5b7f3ee892349ae4bbe61dce18f95115b5dc02daf49204cc602458cd4c1f540d56d76001028888888860405180838380828437820191505092505050604051809103902060005488886040516020018088600019166000191681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185600019166000191681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019750505050505050506040516020818303038152906040526040518082805190602001908083835b60208310151561035f578051825260208201915060208101905060208303925061033a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905060059150509998505050505050505050565b6002818154811015156103af57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600054815600a165627a7a72305820716bd102d0946f4af67b9d7d7a797e5adb21d9d78ae77b335c17b55a1b1baaf40029"
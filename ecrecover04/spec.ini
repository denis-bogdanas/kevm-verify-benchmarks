[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
balance: _
storage: M
origstorage: _
nonce: _
;callee
callee_bal: CALLEE_BAL
callee_storage: _
callee_origstorage: _
callee_nonce: _
callee_code: _
;origin
requires:
    
ensures:
attribute:

[get]
k: (#execute => #halt) ~> _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData("get", (#bytes32(ARG0), #bytes32(ARG1), #uint8(SIGV), #bytes32(SIGR), #bytes32(SIGS)) )
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _
coinbase: _ => _
+requires:  andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)
            andBool #rangeUInt(8, SIGV)
            andBool #rangeBytes(32, SIGR)
            andBool #rangeBytes(32, SIGS)

            andBool #rangeBytes(32, ARG0)
            andBool #rangeBytes(32, ARG1)
            andBool HASH ==Int keccak(25 : 1 : #encodeArgs(#bytes32(ARG0), #bytes32(ARG1)))
            andBool #rangeUInt(8, HASH)

            andBool ECREC_DATA ==K #encodeArgs( #bytes32(HASH), #uint8(SIGV), #bytes32(SIGR), #bytes32(SIGS) )

[get-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #encodeArgs(#uint256(5))
+requires:
            andBool RECOVERED ==Int #symEcrec( ECREC_DATA )
            andBool notBool #ecrecEmpty( ECREC_DATA )

[get-failure]
statusCode: _ => EVMC_REVERT
output: _ => _
+requires:
            andBool #ecrecEmpty( ECREC_DATA )


[pgm]
compiler: "Solidity"

nonce_slot = 0

contract_code: "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638aa2a19d14610046575b600080fd5b34801561005257600080fd5b506100ac60048036038101908080356000191690602001909291908035600019169060200190929190803560ff169060200190929190803560001916906020019092919080356000191690602001909291905050506100c2565b6040518082815260200191505060405180910390f35b6000806000878760405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561015c5780518252602082019150602081019050602083039250610137565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209150600182878787604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015610202573d6000803e3d6000fd5b50505060206040510351905060008173ffffffffffffffffffffffffffffffffffffffff1611151561023357600080fd5b600592505050959450505050505600a165627a7a723058202cae3a4c03d980d91fdef92155ebb71f16d78885311cfb372fa2551a63a1504c0029"
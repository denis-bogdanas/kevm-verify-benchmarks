[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
contract_bal: CONTRACT_BAL
contract_storage: M
contract_origstorage: _
contract_nonce: _
;origin
requires:
    andBool #rangeUInt(256, CONTRACT_BAL)
ensures:
attribute:

[get]
k: (#execute => #halt) ~> _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData("get", (#bytes32(HASH), #uint8(SIGV), #bytes32(SIGR), #bytes32(SIGS)) )
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _
coinbase: _ => _
+requires:  andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)
            andBool #rangeBytes(32, HASH)
            andBool #rangeUInt(8, SIGV)
            andBool #rangeBytes(32, SIGR)
            andBool #rangeBytes(32, SIGS)

            andBool ECREC_DATA ==K #encodeArgs( #bytes32(HASH), #uint8(SIGV), #bytes32(SIGR), #bytes32(SIGS) )

            andBool select(M, #hashedLocation({COMPILER}, {OWNERS_SLOT}, .IntList)) ==Int NONCE
            andBool #rangeUInt(256, NONCE)

[get-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #encodeArgs(#uint256(5))
+requires:
            andBool RECOVERED ==Int #symEcrec( ECREC_DATA )
            andBool notBool #ecrecEmpty( ECREC_DATA )

[get-failure]
statusCode: _ => EVMC_REVERT
output: _ => _
+requires:
            andBool #ecrecEmpty( ECREC_DATA )


[pgm]
compiler: "Solidity"

owners_slot = 0

contract_code: "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063eb7f797e14610046575b600080fd5b34801561005257600080fd5b5061009e6004803603810190808035600019169060200190929190803560ff169060200190929190803560001916906020019092919080356000191690602001909291905050506100b4565b6040518082815260200191505060405180910390f35b600080600186868686604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af115801561012e573d6000803e3d6000fd5b50505060206040510351905060008173ffffffffffffffffffffffffffffffffffffffff161180156101a857506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15156101b357600080fd5b60059150509493505050505600a165627a7a7230582075371bfc2c1d4af879d1c9984fe7b735a4832a3713a0d86e267e155403a41f730029"
;root eDSL rule from all other eDSL rules extend
[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
callCount: _
callLog: _ => _
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(#CALLEE_ID) SetItem(1) _:Set
accounts:
;contract
contract_bal: CONTRACT_BAL
contract_storage: _
contract_origstorage: _
contract_nonce: _
;callee
callee_bal: CALLEE_BAL
callee_storage: _
callee_origstorage: _
callee_nonce: _
callee_code: _
;origin
requires:
    andBool #rangeUInt(256, CONTRACT_BAL)
ensures:
attribute:

[fn]
k: (#execute => #halt) ~> _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _
coinbase: _ => _
+requires:  andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)

[fn-execute]
statusCode: _ => EVMC_SUCCESS
output: _ => #encodeArgs(#uint256(A0))
callData:  #abiCallData2("execute(uint256[3])", #uint256(A0), #uint256(A1), #uint256(A2))
+requires:  andBool #rangeUInt(256, A0)
            andBool #rangeUInt(256, A1)
            andBool #rangeUInt(256, A2)

[pgm]
compiler: "Solidity"
contract_code: "0x608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806370be684b146044575b600080fd5b348015604f57600080fd5b506091600480360381019080806060019060038060200260405190810160405280929190826003602002808284378201915050505050919291929050505060a7565b6040518082815260200191505060405180910390f35b600081600060038110151560b757fe5b602002015190509190505600a165627a7a7230582080d7a761660fc07580fd3b328637380678c3bfeb6ec31719517e6860f37a46fc0029"
call_log_pcset: .Set
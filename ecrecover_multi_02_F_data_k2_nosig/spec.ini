[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
contract_bal: CONTRACT_BAL
contract_storage: M
contract_origstorage: _
contract_nonce: _
;callee
callee_bal: CALLEE_BAL
callee_storage: _
callee_origstorage: _
callee_nonce: _
callee_code: _
;origin
requires:
    andBool #rangeUInt(256, CONTRACT_BAL)
ensures:
attribute:

[get]
k: (#execute => #halt) ~> _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData2("get(bytes,bytes32)",
                            #bytes(#buf(DATA_LEN,DATA)),
                            #bytes32(HASH))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _
coinbase: _ => _
+requires:
            andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)
            andBool #rangeBytes(32, HASH)

            andBool #rangeUInt(256, DATA_LEN)
            andBool DATA_LEN <Int 2 ^Int 16

            andBool ECREC_DATA0 ==K #encodeArgs( #bytes32(HASH), #uint8(0), #bytes32(0), #bytes32(0) )
            andBool ECREC_DATA1 ==K #encodeArgs( #bytes32(HASH), #uint8(1), #bytes32(1), #bytes32(1) )


[get-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #encodeArgs(#uint256(5))
+requires:
    andBool RECOVERED0 ==Int #symEcrec( ECREC_DATA0 )
    andBool RECOVERED1 ==Int #symEcrec( ECREC_DATA1 )
    andBool notBool #ecrecEmpty( ECREC_DATA0 )
    andBool notBool #ecrecEmpty( ECREC_DATA1 )

[get-failure-0]
statusCode: _ => EVMC_REVERT
output: _ => _
+requires:
    andBool #ecrecEmpty( ECREC_DATA0 )


[get-failure-1]
statusCode: _ => EVMC_REVERT
output: _ => _
+requires:
    andBool #ecrecEmpty( ECREC_DATA1 )

[pgm]
compiler: "Solidity"

nonce_slot = 0

threshold = 2

contract_code: "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063107cf64f14610046575b600080fd5b34801561005257600080fd5b506101166004803603604081101561006957600080fd5b810190808035906020019064010000000081111561008657600080fd5b82018360208201111561009857600080fd5b803590602001918460018302840111640100000000831117156100ba57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919050505061012c565b6040518082815260200191505060405180910390f35b600080600090505b60028110156101f757600060018483846001028560010260405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156101a2573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161115156101e957600080fd5b508080600101915050610134565b50600590509291505056fea165627a7a72305820bc70389c625efe11afd573a506d9e1b887530d34dcd7f3971889a77d6948c6640029"
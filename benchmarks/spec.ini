#root eDSL rule from all other eDSL rules extend
[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
contract_bal: CONTRACT_BAL
contract_storage: _
contract_origstorage: _
contract_nonce: _
;origin
requires:
    andBool #rangeUInt(256, CONTRACT_BAL)
ensures:
attribute:


#eDSL rule for external contract function called foo
[foo-sample-rule]
k: (#execute => #halt) ~> _
statusCode: _ => _
output: _ => _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData("foo")
callValue: _
wordStack: .WordStack => _
localMem: .IMap => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _ => _
coinbase: _ => _
+requires:  andBool #range(0 <= CD < 1023)
            andBool #rangeAddress(MSG_SENDER)


[pgm]
compiler: "Solidity"

contract_code: "0xDEADBEEF123..."
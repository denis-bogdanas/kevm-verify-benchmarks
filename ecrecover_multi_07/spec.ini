[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
contract_bal: CONTRACT_BAL
contract_storage: M
contract_origstorage: _
contract_nonce: _
;callee
callee_bal: CALLEE_BAL
callee_storage: _
callee_origstorage: _
callee_nonce: _
callee_code: _
;origin
requires:
    andBool #rangeUInt(256, CONTRACT_BAL)
ensures:
attribute:

[get]
k: (#execute => #halt) ~> _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData2("execute(bytes32,uint8[{THRESHOLD}],bytes32[{THRESHOLD}],bytes32[{THRESHOLD}],bytes)",
                                #uint8(SIGV0), #uint8(SIGV1), #uint8(SIGV2),
                                #bytes32(SIGR0), #bytes32(SIGR1), #bytes32(SIGR2),
                                #bytes32(SIGS0), #bytes32(SIGS1), #bytes32(SIGS2),
                                #address(DESTINATION),
                                #uint256(VALUE),
                                #address(EXECUTOR),
                                #uint256(GASLIMIT1),
                                #bytes(#buf(DATA_LEN,DATA)),
                                #bytes32(HASH))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _
coinbase: _ => _
+requires:
            andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)
            andBool #rangeBytes(32, HASH)
            andBool #rangeUInt(8, SIGV0)
            andBool #rangeUInt(8, SIGV1)
            andBool #rangeUInt(8, SIGV2)
            andBool #rangeBytes(32, SIGR0)
            andBool #rangeBytes(32, SIGR1)
            andBool #rangeBytes(32, SIGR2)
            andBool #rangeBytes(32, SIGS0)
            andBool #rangeBytes(32, SIGS1)
            andBool #rangeBytes(32, SIGS2)

            andBool #rangeAddress(DESTINATION)
            andBool #rangeUInt(256, VALUE)
            andBool #rangeUInt(256, DATA_LEN)
            andBool #rangeAddress(EXECUTOR)
            andBool #rangeUInt(256, GASLIMIT1)
            andBool DATA_LEN <Int 2 ^Int 16

            andBool ECREC_DATA0 ==K #encodeArgs( #bytes32(HASH), #uint8(SIGV0), #bytes32(SIGR0), #bytes32(SIGS0) )
            andBool ECREC_DATA1 ==K #encodeArgs( #bytes32(HASH), #uint8(SIGV1), #bytes32(SIGR1), #bytes32(SIGS1) )
            andBool ECREC_DATA2 ==K #encodeArgs( #bytes32(HASH), #uint8(SIGV2), #bytes32(SIGR2), #bytes32(SIGS2) )

[get-recovered]
+requires:
    andBool notBool #ecrecEmpty( ECREC_DATA0 )
    andBool notBool #ecrecEmpty( ECREC_DATA1 )
    andBool notBool #ecrecEmpty( ECREC_DATA2 )
    andBool RECOVERED0 ==Int #symEcrec( ECREC_DATA0 )
    andBool RECOVERED1 ==Int #symEcrec( ECREC_DATA1 )
    andBool RECOVERED2 ==Int #symEcrec( ECREC_DATA2 )

[get-recovered-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #encodeArgs(#uint256(5))
+requires:
    andBool RECOVERED0 <Int RECOVERED1
    andBool RECOVERED1 <Int RECOVERED2

[get-unrecovered]
statusCode: _ => EVMC_REVERT
output: _ => _

[get-unrecovered-0]
+requires:
    andBool #ecrecEmpty( ECREC_DATA0 )

[get-unrecovered-1]
+requires:
    andBool #ecrecEmpty( ECREC_DATA1 )

[get-unrecovered-2]
+requires:
    andBool #ecrecEmpty( ECREC_DATA2 )

[get-recovered-unsorted]
statusCode: _ => EVMC_REVERT
output: _ => _

[get-recovered-unsorted-0]
+requires:
    andBool RECOVERED0 >=Int RECOVERED1

[get-recovered-unsorted-1]
+requires:
    andBool RECOVERED1 >=Int RECOVERED2

[pgm]
compiler: "Solidity"

nonce_slot = 0

threshold = 3

contract_code: "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063104221fd14610046575b600080fd5b34801561005257600080fd5b5061022e60048036036101e081101561006a57600080fd5b8101908080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f820116905080830192505050505050919291929080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f820116905080830192505050505050919291929080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f8201169050808301925050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561017457600080fd5b82018360208201111561018657600080fd5b803590602001918460018302840111640100000000831117156101a857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610244565b6040518082815260200191505060405180910390f35b6000806000905060008090505b600381101561039a5760006001858e8460038110151561026d57fe5b60200201518e8560038110151561028057fe5b60200201518e8660038110151561029357fe5b602002015160405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156102ef573d6000803e3d6000fd5b5050506020604051035190508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1611801561037e57506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561038957600080fd5b809250508080600101915050610251565b506005915050999850505050505050505056fea165627a7a72305820d0d653acb2416045e822588939f895797a329aee876da9d0f7b8c9c3797c096f0029"
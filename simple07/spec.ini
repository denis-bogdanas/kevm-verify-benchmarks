;root eDSL rule from all other eDSL rules extend
[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
contract_bal: CONTRACT_BAL
contract_storage: _
contract_origstorage: _
contract_nonce: _
;callee
callee_bal: CALLEE_BAL
callee_storage: _
callee_origstorage: _
callee_nonce: _
callee_code: _
;origin
requires:
    andBool #rangeUInt(256, CONTRACT_BAL)
ensures:
attribute:


;eDSL rule for external contract function called getx
[get5ifeq]
k: (#execute => #halt) ~> _
output: _ => _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData("get5ifeq", #array(#uint256(_), XARR_LEN, _), #uint256(Y))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _
coinbase: _ => _
+requires:  andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)
            andBool #rangeUInt(256, XARR_LEN)
            andBool #rangeUInt(256, Y)


[get5ifeq-xleneqy]
output: _ => #encodeArgs(#uint256(5))
statusCode: _ => EVMC_SUCCESS
+requires: andBool XARR_LEN ==Int Y


[get5ifeq-xlenneqy]
statusCode: _ => EVMC_REVERT
+requires: andBool XARR_LEN =/=Int Y

[pgm]
compiler: "Solidity"

contract_code: "0x608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806379017147146044575b600080fd5b348015604f57600080fd5b50608460048036038101908080359060200190820180359060200191909192939192939080359060200190929190505050609a565b6040518082815260200191505060405180910390f35b6000818484905014151560ac57600080fd5b6005905093925050505600a165627a7a72305820b676bdca6d3828f1d1294177b0deedb1ab12223ac106ebb6b8ef9fe799d007aa0029"
[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
balance: _
storage: M
origstorage: _
nonce: _
;callee
callee_bal: CALLEE_BAL
callee_storage: _
callee_origstorage: _
callee_nonce: _
callee_code: _
;origin
requires:
    
ensures:
attribute:

[get]
k: (#execute => #halt) ~> _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData("get", #bytes32(HASH), #staticarray1(#uint8(_), {THRESHOLD}, #uint8(SIGV0), #uint8(SIGV1), #uint8(SIGV2)),
                                                #staticarray1(#bytes32(_), {THRESHOLD}, #bytes32(SIGR0), #bytes32(SIGR1), #bytes32(SIGR2)),
                                                #staticarray1(#bytes32(_), {THRESHOLD}, #bytes32(SIGS0), #bytes32(SIGS1), #bytes32(SIGS2)))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _
coinbase: _ => _
+requires:
            andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)
            andBool #rangeBytes(32, HASH)
            andBool #rangeUInt(8, SIGV0)
            andBool #rangeUInt(8, SIGV1)
            andBool #rangeUInt(8, SIGV2)
            andBool #rangeBytes(32, SIGR0)
            andBool #rangeBytes(32, SIGR1)
            andBool #rangeBytes(32, SIGR2)
            andBool #rangeBytes(32, SIGS0)
            andBool #rangeBytes(32, SIGS1)
            andBool #rangeBytes(32, SIGS2)

[get-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #encodeArgs(#uint256(5))

[pgm]
compiler: "Solidity"

nonce_slot = 0

threshold = 3

contract_code: "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636b3a9f6114610046575b600080fd5b34801561005257600080fd5b506101026004803603810190808035600019169060200190929190806060019060038060200260405190810160405280929190826003602002808284378201915050505050919291929080606001906003806020026040519081016040528092919082600360200280828437820191505050505091929192908060600190600380602002604051908101604052809291908260036020028082843782019150505050509192919290505050610118565b6040518082815260200191505060405180910390f35b6000600590509493505050505600a165627a7a723058202c9e376a3bed28ae1a3fd421245bfcbab72d4ac254cce8bb3f307faa42df1f390029"
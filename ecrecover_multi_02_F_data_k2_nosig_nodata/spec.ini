[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
contract_bal: CONTRACT_BAL
contract_storage: M
contract_origstorage: _
contract_nonce: _
;callee
callee_bal: CALLEE_BAL
callee_storage: _
callee_origstorage: _
callee_nonce: _
callee_code: _
;origin
requires:
    andBool #rangeUInt(256, CONTRACT_BAL)
ensures:
attribute:

[get]
k: (#execute => #halt) ~> _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData2("get(bytes32)",
                            #bytes32(HASH))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _
coinbase: _ => _
+requires:
            andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)
            andBool #rangeBytes(32, HASH)

            andBool ECREC_DATA0 ==K #encodeArgs( #bytes32(HASH), #uint8(0), #bytes32(0), #bytes32(0) )
            andBool ECREC_DATA1 ==K #encodeArgs( #bytes32(HASH), #uint8(1), #bytes32(1), #bytes32(1) )


[get-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #encodeArgs(#uint256(5))
+requires:
    andBool RECOVERED0 ==Int #symEcrec( ECREC_DATA0 )
    andBool RECOVERED1 ==Int #symEcrec( ECREC_DATA1 )
    andBool notBool #ecrecEmpty( ECREC_DATA0 )
    andBool notBool #ecrecEmpty( ECREC_DATA1 )

[get-failure-0]
statusCode: _ => EVMC_REVERT
output: _ => _
+requires:
    andBool #ecrecEmpty( ECREC_DATA0 )


[get-failure-1]
statusCode: _ => EVMC_REVERT
output: _ => _
+requires:
    andBool #ecrecEmpty( ECREC_DATA1 )

[pgm]
compiler: "Solidity"

nonce_slot = 0

threshold = 2

contract_code: "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638eaa6ac014610046575b600080fd5b34801561005257600080fd5b5061007f6004803603602081101561006957600080fd5b8101908080359060200190929190505050610095565b6040518082815260200191505060405180910390f35b600080600090505b600281101561016057600060018483846001028560010260405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561010b573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1611151561015257600080fd5b50808060010191505061009d565b506005905091905056fea165627a7a72305820fd327a04e2d149d1e364a3b30d40a783f9509862cd9bc13f398e4bf9d47025040029"
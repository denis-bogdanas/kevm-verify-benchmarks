[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
callCount: _
callLog: _ => _
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(1) _:Set
accounts:
;contract
contract_bal: CONTRACT_BAL
contract_storage: _
contract_origstorage: _
contract_nonce: _
;origin
requires:
    andBool #rangeUInt(256, CONTRACT_BAL)
ensures:
attribute:

[fn]
k: (#execute => #halt) ~> _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
coinbase: _ => _
+requires:  andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)

[fn-execute]
contract_storage: S0 => S1
refund: _ => _
statusCode: _ => EVMC_SUCCESS
output: _ => #encodeArgs(#uint256(N1))
callData:   #abiCallData2("execute()", .TypedArgs)
+requires:  andBool N0 ==Int select(S0, #hashedLocation("Solidity", 0, .IntList))
            andBool #rangeUInt(256, N0)
+ensures:
            andBool N1 ==Int select(S1, #hashedLocation("Solidity", 0, .IntList))
            andBool N1 ==Int 5



[pgm]
compiler: "Solidity"
contract_code: "0x608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806361461954146044575b600080fd5b348015604f57600080fd5b506056606c565b6040518082815260200191505060405180910390f35b6000600560008190555060005490509056fea165627a7a723058208e118da62d2a0da493acb1e41710779922db5b5cf40e1413cbe69a7d2933c9a50029"
call_log_pcset: .Set
rm -rf ./generated
mkdir -p generated
cp ../resources/verification2.k ../resources/abstract-semantics.k ../resources/abstract-semantics-segmented-gas.k ../resources/evm-symbolic.k ../resources/evm-data-map-symbolic.k ../resources/ecrec-symbolic.k ../resources/edsl-static-array.k generated
mv generated/verification2.k generated/verification.k
bash /home/sbugrara/kevm-verify-benchmarks/resources/compile5
pandoc --from markdown --to "/home/sbugrara/kevm-verify-benchmarks/.build/pandoc-tangle/tangle.lua" --metadata=code:".k" /home/sbugrara/kevm-verify-benchmarks/resources/lemmas.md > generated/lemmas.k
python3 /home/sbugrara/kevm-verify-benchmarks/resources/gen-spec.py ../resources/module-tmpl.k ../resources/spec-tmpl.k ./spec.ini fn-execute-overflow fn-execute-overflow > generated/fn-execute-overflow-spec.k
/home/sbugrara/kevm-verify-benchmarks/.build/k/k-distribution/target/release/k/bin/kprove -v --debug -d /home/sbugrara/kevm-verify-benchmarks/.build/evm-semantics/.build/java -m VERIFICATION --z3-impl-timeout 500 --deterministic-functions --no-exc-wrap --cache-func-optimized --no-alpha-renaming --format-failures --boundary-cells k,pc --log-cells k,output,statusCode,localMem,pc,gas,wordStack,callData,accounts,memoryUsed,#pc,#result,#target --smt-prelude ../resources/evm.smt2  generated/fn-execute-overflow-spec.k
Parse command line options                                   =  0.000s
Importing: Source(/home/sbugrara/kevm-verify-benchmarks/0-storagevar02-0.5.0/././generated/fn-execute-overflow-spec.k)
Importing: Source(/home/sbugrara/kevm-verify-benchmarks/0-storagevar02-0.5.0/generated/fn-execute-overflow-spec.k)
Importing: Source(/home/sbugrara/kevm-verify-benchmarks/0-storagevar02-0.5.0/generated/abstract-semantics.k)
Importing: Source(/home/sbugrara/kevm-verify-benchmarks/0-storagevar02-0.5.0/generated/abstract-semantics-segmented-gas.k)
Importing: Source(/home/sbugrara/kevm-verify-benchmarks/0-storagevar02-0.5.0/generated/evm-symbolic.k)
Importing: Source(/home/sbugrara/kevm-verify-benchmarks/.build/evm-semantics/.build/java/edsl.k)
Importing: Source(/home/sbugrara/kevm-verify-benchmarks/.build/evm-semantics/.build/java/evm.k)
Importing: Source(/home/sbugrara/kevm-verify-benchmarks/.build/evm-semantics/.build/java/data.k)
Importing: Source(/home/sbugrara/kevm-verify-benchmarks/.build/evm-semantics/.build/java/krypto.k)
Importing: Source(/home/sbugrara/kevm-verify-benchmarks/.build/evm-semantics/.build/java/network.k)
Importing: Source(/home/sbugrara/kevm-verify-benchmarks/0-storagevar02-0.5.0/generated/ecrec-symbolic.k)
Importing: Source(/home/sbugrara/kevm-verify-benchmarks/0-storagevar02-0.5.0/generated/verification.k)
Importing: Source(/home/sbugrara/kevm-verify-benchmarks/0-storagevar02-0.5.0/generated/evm-data-map-symbolic.k)
Importing: Source(/home/sbugrara/kevm-verify-benchmarks/0-storagevar02-0.5.0/generated/lemmas.k)
Importing: Source(/home/sbugrara/kevm-verify-benchmarks/0-storagevar02-0.5.0/generated/edsl-static-array.k)
Parse spec modules [2/1221 rules]                            =  0.020s

Parsing finished:   74.873 s

Initialization finished
==================================
Stats for each phase, time, used memory, implicit main GC time percentage:
Total                 :   75.832 s,	  502 MB, gc:  2.312 %
  Parsing             :   74.873 s,	  681 MB, gc:  2.341 %
  Init                :    0.959 s,	  502 MB, gc:  0.000 %

Init+Execution time:       0.959 s
  query build time                 :    0.017 s,      #         12
  Z3 Function rule implication time:    0.121 s,      #         10
      sat           :       10
    query build failures: 2

  Time and top-level event counts:
  resolveFunctionAndAnywhere time  :    0.410 s,      #        642
    evaluateFunction time            :    0.402 s,      #        101
      builtin evaluation               :           ,      #         21
      function rule                    :           ,      #         34
      no rule applicable               :           ,      #         42
      no function rules                :           ,      #          4
    applyAnywhereRules time          :    0.001 s,      #        290
      no anywhere rules                :           ,      #        290
    remaining time & # cached        :    0.007 s,      #        251
  impliesSMT time                  :    0.144 s,      #         12

  Recursive event counts:
  resolveFunctionAndAnywhere time  :           ,      #       7655
    evaluateFunction time            :           ,      #       4294
      builtin evaluation               :           ,      #       2163
      function rule                    :           ,      #       1897
      no rule applicable               :           ,      #        183
      no function rules                :           ,      #          2
    applyAnywhereRules time          :           ,      #        557
      no anywhere rules                :           ,      #        557
    # cached                         :           ,      #       2804
==================================


Target term
=====================

<generatedTop>(<k>(#KSequence(#halt_EVM(.KList), _650_2783:K)),, <exit-code>(Int(#"1")),, <mode>(NORMAL(.KList)),, <schedule>(BYZANTIUM_EVM(.KList)),, <analysis>(.Map),, <ethereum>(<evm>(<output>(_:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, .WordStack_EVM-DATA(.KList)))))))))))))))))))))))))))))))))),, <statusCode>(EVMC_SUCCESS_NETWORK(.KList)),, <callStack>(_653_2786:List),, <interimStates>(_654_2787:List),, <touchedAccounts>(_656_2789:Set),, <callState>(<program>(Int(#"128") |-> SWAP(Int(#"1")) Int(#"0") |-> PUSH(Int(#"1"),, Int(#"128")) Int(#"129") |-> JUMP_EVM(.KList) Int(#"2") |-> PUSH(Int(#"1"),, Int(#"64")) Int(#"130") |-> INVALID_EVM(.KList) Int(#"131") |-> LOG(Int(#"1")) Int(#"4") |-> MSTORE_EVM(.KList) Int(#"132") |-> PUSH(Int(#"6"),, Int(#"108278179835992")) Int(#"5") |-> PUSH(Int(#"1"),, Int(#"4")) Int(#"7") |-> CALLDATASIZE_EVM(.KList) Int(#"8") |-> LT_EVM(.KList) Int(#"9") |-> PUSH(Int(#"1"),, Int(#"63")) Int(#"11") |-> JUMPI_EVM(.KList) Int(#"139") |-> SHA3_EVM(.KList) Int(#"12") |-> PUSH(Int(#"1"),, Int(#"0")) Int(#"140") |-> DUP(Int(#"5")) Int(#"141") |-> UNDEFINED(_)_EVM(Int(#"173")) Int(#"14") |-> CALLDATALOAD_EVM(.KList) Int(#"142") |-> PUSH(Int(#"26"),, Int(#"149564950478168760381264113381699095436167681510439576405639703")) Int(#"15") |-> PUSH(Int(#"29"),, Int(#"26959946667150639794667015087019630673637144422540572481103610249216")) Int(#"169") |-> SWAP(Int(#"5")) Int(#"170") |-> PUSH(Int(#"17"),, Int(#"32667320108581292420416732063799246323712")) Int(#"45") |-> SWAP(Int(#"1")) Int(#"46") |-> DIV_EVM(.KList) Int(#"47") |-> PUSH(Int(#"4"),, Int(#"4294967295")) Int(#"52") |-> AND_EVM(.KList) Int(#"53") |-> DUP(Int(#"1")) Int(#"54") |-> PUSH(Int(#"4"),, Int(#"1631983956")) Int(#"59") |-> EQ_EVM(.KList) Int(#"60") |-> PUSH(Int(#"1"),, Int(#"68")) Int(#"62") |-> JUMPI_EVM(.KList) Int(#"63") |-> JUMPDEST_EVM(.KList) Int(#"64") |-> PUSH(Int(#"1"),, Int(#"0")) Int(#"66") |-> DUP(Int(#"1")) Int(#"67") |-> REVERT_EVM(.KList) Int(#"68") |-> JUMPDEST_EVM(.KList) Int(#"69") |-> CALLVALUE_EVM(.KList) Int(#"70") |-> DUP(Int(#"1")) Int(#"71") |-> ISZERO_EVM(.KList) Int(#"72") |-> PUSH(Int(#"1"),, Int(#"79")) Int(#"74") |-> JUMPI_EVM(.KList) Int(#"75") |-> PUSH(Int(#"1"),, Int(#"0")) Int(#"77") |-> DUP(Int(#"1")) Int(#"78") |-> REVERT_EVM(.KList) Int(#"79") |-> JUMPDEST_EVM(.KList) Int(#"80") |-> POP_EVM(.KList) Int(#"81") |-> PUSH(Int(#"1"),, Int(#"86")) Int(#"83") |-> PUSH(Int(#"1"),, Int(#"108")) Int(#"85") |-> JUMP_EVM(.KList) Int(#"86") |-> JUMPDEST_EVM(.KList) Int(#"87") |-> PUSH(Int(#"1"),, Int(#"64")) Int(#"89") |-> MLOAD_EVM(.KList) Int(#"90") |-> DUP(Int(#"1")) Int(#"91") |-> DUP(Int(#"3")) Int(#"92") |-> DUP(Int(#"2")) Int(#"93") |-> MSTORE_EVM(.KList) Int(#"94") |-> PUSH(Int(#"1"),, Int(#"32")) Int(#"96") |-> ADD_EVM(.KList) Int(#"97") |-> SWAP(Int(#"2")) Int(#"98") |-> POP_EVM(.KList) Int(#"99") |-> POP_EVM(.KList) Int(#"100") |-> PUSH(Int(#"1"),, Int(#"64")) Int(#"102") |-> MLOAD_EVM(.KList) Int(#"103") |-> DUP(Int(#"1")) Int(#"104") |-> SWAP(Int(#"2")) Int(#"105") |-> SUB_EVM(.KList) Int(#"106") |-> SWAP(Int(#"1")) Int(#"107") |-> RETURN_EVM(.KList) Int(#"108") |-> JUMPDEST_EVM(.KList) Int(#"109") |-> PUSH(Int(#"1"),, Int(#"0")) Int(#"111") |-> PUSH(Int(#"1"),, Int(#"1")) Int(#"113") |-> PUSH(Int(#"1"),, Int(#"0")) Int(#"115") |-> SLOAD_EVM(.KList) Int(#"116") |-> ADD_EVM(.KList) Int(#"117") |-> PUSH(Int(#"1"),, Int(#"0")) Int(#"119") |-> DUP(Int(#"2")) Int(#"120") |-> SWAP(Int(#"1")) Int(#"121") |-> SSTORE_EVM(.KList) Int(#"122") |-> POP_EVM(.KList) Int(#"123") |-> PUSH(Int(#"1"),, Int(#"0")) Int(#"125") |-> SLOAD_EVM(.KList) Int(#"126") |-> SWAP(Int(#"1")) Int(#"127") |-> POP_EVM(.KList)   ),, <programBytes>(_:_WS(Int(#"96"),, _:_WS(Int(#"128"),, _:_WS(Int(#"96"),, _:_WS(Int(#"64"),, _:_WS(Int(#"82"),, _:_WS(Int(#"96"),, _:_WS(Int(#"4"),, _:_WS(Int(#"54"),, _:_WS(Int(#"16"),, _:_WS(Int(#"96"),, _:_WS(Int(#"63"),, _:_WS(Int(#"87"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"53"),, _:_WS(Int(#"124"),, _:_WS(Int(#"1"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"144"),, _:_WS(Int(#"4"),, _:_WS(Int(#"99"),, _:_WS(Int(#"255"),, _:_WS(Int(#"255"),, _:_WS(Int(#"255"),, _:_WS(Int(#"255"),, _:_WS(Int(#"22"),, _:_WS(Int(#"128"),, _:_WS(Int(#"99"),, _:_WS(Int(#"97"),, _:_WS(Int(#"70"),, _:_WS(Int(#"25"),, _:_WS(Int(#"84"),, _:_WS(Int(#"20"),, _:_WS(Int(#"96"),, _:_WS(Int(#"68"),, _:_WS(Int(#"87"),, _:_WS(Int(#"91"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"128"),, _:_WS(Int(#"253"),, _:_WS(Int(#"91"),, _:_WS(Int(#"52"),, _:_WS(Int(#"128"),, _:_WS(Int(#"21"),, _:_WS(Int(#"96"),, _:_WS(Int(#"79"),, _:_WS(Int(#"87"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"128"),, _:_WS(Int(#"253"),, _:_WS(Int(#"91"),, _:_WS(Int(#"80"),, _:_WS(Int(#"96"),, _:_WS(Int(#"86"),, _:_WS(Int(#"96"),, _:_WS(Int(#"108"),, _:_WS(Int(#"86"),, _:_WS(Int(#"91"),, _:_WS(Int(#"96"),, _:_WS(Int(#"64"),, _:_WS(Int(#"81"),, _:_WS(Int(#"128"),, _:_WS(Int(#"130"),, _:_WS(Int(#"129"),, _:_WS(Int(#"82"),, _:_WS(Int(#"96"),, _:_WS(Int(#"32"),, _:_WS(Int(#"1"),, _:_WS(Int(#"145"),, _:_WS(Int(#"80"),, _:_WS(Int(#"80"),, _:_WS(Int(#"96"),, _:_WS(Int(#"64"),, _:_WS(Int(#"81"),, _:_WS(Int(#"128"),, _:_WS(Int(#"145"),, _:_WS(Int(#"3"),, _:_WS(Int(#"144"),, _:_WS(Int(#"243"),, _:_WS(Int(#"91"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"96"),, _:_WS(Int(#"1"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"84"),, _:_WS(Int(#"1"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"129"),, _:_WS(Int(#"144"),, _:_WS(Int(#"85"),, _:_WS(Int(#"80"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"84"),, _:_WS(Int(#"144"),, _:_WS(Int(#"80"),, _:_WS(Int(#"144"),, _:_WS(Int(#"86"),, _:_WS(Int(#"254"),, _:_WS(Int(#"161"),, _:_WS(Int(#"101"),, _:_WS(Int(#"98"),, _:_WS(Int(#"122"),, _:_WS(Int(#"122"),, _:_WS(Int(#"114"),, _:_WS(Int(#"48"),, _:_WS(Int(#"88"),, _:_WS(Int(#"32"),, _:_WS(Int(#"132"),, _:_WS(Int(#"173"),, _:_WS(Int(#"121"),, _:_WS(Int(#"93"),, _:_WS(Int(#"19"),, _:_WS(Int(#"18"),, _:_WS(Int(#"63"),, _:_WS(Int(#"96"),, _:_WS(Int(#"188"),, _:_WS(Int(#"127"),, _:_WS(Int(#"210"),, _:_WS(Int(#"161"),, _:_WS(Int(#"141"),, _:_WS(Int(#"186"),, _:_WS(Int(#"102"),, _:_WS(Int(#"235"),, _:_WS(Int(#"141"),, _:_WS(Int(#"50"),, _:_WS(Int(#"13"),, _:_WS(Int(#"222"),, _:_WS(Int(#"168"),, _:_WS(Int(#"118"),, _:_WS(Int(#"88"),, _:_WS(Int(#"71"),, _:_WS(Int(#"242"),, _:_WS(Int(#"174"),, _:_WS(Int(#"89"),, _:_WS(Int(#"130"),, _:_WS(Int(#"23"),, _:_WS(Int(#"148"),, _:_WS(Int(#"112"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"41"),, .WordStack_EVM-DATA(.KList)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),, <id>(#CONTRACT_ID_VERIFICATION(.KList)),, <caller>(MSG_SENDER_2771:Int),, <callData>(_:_WS(Int(#"97"),, _:_WS(Int(#"70"),, _:_WS(Int(#"25"),, _:_WS(Int(#"84"),, .WordStack_EVM-DATA(.KList)))))),, <callValue>(Int(#"0")),, <wordStack>(_657_2790:WordStack),, <localMem>(_658_2791:Map),, <pc>(_659_2792:Int),, <gas>(_660_2793:Int),, <memoryUsed>(_661_2794:Int),, <previousGas>(_663_2796:Int),, <static>(Bool(#"false")),, <callDepth>(CD_2777:Int)),, <substate>(<selfDestruct>(_664_2797:Set),, <log>(_665_2798:List),, <refund>(_667_2800:Int)),, <gasPrice>(_668_2801:Int),, <origin>(_669_2802:Int),, <previousHash>(_670_2803:Int),, <ommersHash>(_671_2804:Int),, <coinbase>(_673_2806:Int),, <stateRoot>(_674_2807:Int),, <transactionsRoot>(_675_2808:Int),, <receiptsRoot>(_676_2809:Int),, <logsBloom>(_677_2810:WordStack),, <difficulty>(_678_2811:Int),, <number>(BLOCK_NUM_2775:Int),, <gasLimit>(_679_2812:Int),, <gasUsed>(_680_2813:Int),, <timestamp>(NOW_2782:Int),, <extraData>(_681_2814:WordStack),, <mixHash>(_682_2815:Int),, <blockNonce>(_683_2816:Int),, <ommerBlockHeaders>(_684_2817:JSON),, <blockhash>(BLOCK_HASHES_2776:List)),, <network>(<activeAccounts>(#CALLEE_ID_VERIFICATION(.KList) Int(#"1") #CONTRACT_ID_VERIFICATION(.KList)_685_2818:Set),, <accounts>(<acctID>(#CALLEE_ID_VERIFICATION(.KList)) |-> <account>(<acctID>(#CALLEE_ID_VERIFICATION(.KList)),, <balance>(CALLEE_BAL_2772:Int),, <code>(_688_2821:AccountCode),, <storage>(_689_2822:Map),, <origStorage>(_690_2823:Map),, <nonce>(_691_2824:Int)) <acctID>(Int(#"1")) |-> <account>(<acctID>(Int(#"1")),, <balance>(Int(#"0")),, <code>(.WordStack_EVM-DATA(.KList)),, <storage>(.Map),, <origStorage>(.Map),, <nonce>(Int(#"0"))) <acctID>(#CONTRACT_ID_VERIFICATION(.KList)) |-> <account>(<acctID>(#CONTRACT_ID_VERIFICATION(.KList)),, <balance>(CONTRACT_BAL_2828:Int),, <code>(_:_WS(Int(#"96"),, _:_WS(Int(#"128"),, _:_WS(Int(#"96"),, _:_WS(Int(#"64"),, _:_WS(Int(#"82"),, _:_WS(Int(#"96"),, _:_WS(Int(#"4"),, _:_WS(Int(#"54"),, _:_WS(Int(#"16"),, _:_WS(Int(#"96"),, _:_WS(Int(#"63"),, _:_WS(Int(#"87"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"53"),, _:_WS(Int(#"124"),, _:_WS(Int(#"1"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"144"),, _:_WS(Int(#"4"),, _:_WS(Int(#"99"),, _:_WS(Int(#"255"),, _:_WS(Int(#"255"),, _:_WS(Int(#"255"),, _:_WS(Int(#"255"),, _:_WS(Int(#"22"),, _:_WS(Int(#"128"),, _:_WS(Int(#"99"),, _:_WS(Int(#"97"),, _:_WS(Int(#"70"),, _:_WS(Int(#"25"),, _:_WS(Int(#"84"),, _:_WS(Int(#"20"),, _:_WS(Int(#"96"),, _:_WS(Int(#"68"),, _:_WS(Int(#"87"),, _:_WS(Int(#"91"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"128"),, _:_WS(Int(#"253"),, _:_WS(Int(#"91"),, _:_WS(Int(#"52"),, _:_WS(Int(#"128"),, _:_WS(Int(#"21"),, _:_WS(Int(#"96"),, _:_WS(Int(#"79"),, _:_WS(Int(#"87"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"128"),, _:_WS(Int(#"253"),, _:_WS(Int(#"91"),, _:_WS(Int(#"80"),, _:_WS(Int(#"96"),, _:_WS(Int(#"86"),, _:_WS(Int(#"96"),, _:_WS(Int(#"108"),, _:_WS(Int(#"86"),, _:_WS(Int(#"91"),, _:_WS(Int(#"96"),, _:_WS(Int(#"64"),, _:_WS(Int(#"81"),, _:_WS(Int(#"128"),, _:_WS(Int(#"130"),, _:_WS(Int(#"129"),, _:_WS(Int(#"82"),, _:_WS(Int(#"96"),, _:_WS(Int(#"32"),, _:_WS(Int(#"1"),, _:_WS(Int(#"145"),, _:_WS(Int(#"80"),, _:_WS(Int(#"80"),, _:_WS(Int(#"96"),, _:_WS(Int(#"64"),, _:_WS(Int(#"81"),, _:_WS(Int(#"128"),, _:_WS(Int(#"145"),, _:_WS(Int(#"3"),, _:_WS(Int(#"144"),, _:_WS(Int(#"243"),, _:_WS(Int(#"91"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"96"),, _:_WS(Int(#"1"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"84"),, _:_WS(Int(#"1"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"129"),, _:_WS(Int(#"144"),, _:_WS(Int(#"85"),, _:_WS(Int(#"80"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"84"),, _:_WS(Int(#"144"),, _:_WS(Int(#"80"),, _:_WS(Int(#"144"),, _:_WS(Int(#"86"),, _:_WS(Int(#"254"),, _:_WS(Int(#"161"),, _:_WS(Int(#"101"),, _:_WS(Int(#"98"),, _:_WS(Int(#"122"),, _:_WS(Int(#"122"),, _:_WS(Int(#"114"),, _:_WS(Int(#"48"),, _:_WS(Int(#"88"),, _:_WS(Int(#"32"),, _:_WS(Int(#"132"),, _:_WS(Int(#"173"),, _:_WS(Int(#"121"),, _:_WS(Int(#"93"),, _:_WS(Int(#"19"),, _:_WS(Int(#"18"),, _:_WS(Int(#"63"),, _:_WS(Int(#"96"),, _:_WS(Int(#"188"),, _:_WS(Int(#"127"),, _:_WS(Int(#"210"),, _:_WS(Int(#"161"),, _:_WS(Int(#"141"),, _:_WS(Int(#"186"),, _:_WS(Int(#"102"),, _:_WS(Int(#"235"),, _:_WS(Int(#"141"),, _:_WS(Int(#"50"),, _:_WS(Int(#"13"),, _:_WS(Int(#"222"),, _:_WS(Int(#"168"),, _:_WS(Int(#"118"),, _:_WS(Int(#"88"),, _:_WS(Int(#"71"),, _:_WS(Int(#"242"),, _:_WS(Int(#"174"),, _:_WS(Int(#"89"),, _:_WS(Int(#"130"),, _:_WS(Int(#"23"),, _:_WS(Int(#"148"),, _:_WS(Int(#"112"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"41"),, .WordStack_EVM-DATA(.KList)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),, <storage>(S1_2781:Map),, <origStorage>(_686_2819:Map),, <nonce>(_687_2820:Int))   DotVar1_2774:Map),, <txOrder>(_692_2825:List),, <txPending>(_693_2826:List),, <messages>(_694_2827:Map))))
/\
ConjunctiveFormula(
)

Halt! Terminating branch.

==========================================
Failure final states:
==========================================

<generatedTop>(<k>(#KSequence(#halt_EVM(.KList), _650_2783:K)),, <exit-code>(Int(#"1")),, <mode>(NORMAL(.KList)),, <schedule>(BYZANTIUM_EVM(.KList)),, <analysis>(.Map),, <ethereum>(<evm>(<output>(#buf(Int(#"32"),, chop(_+Int_(select(S0_2780:Map,, Int(#"0")),, Int(#"1"))))),, <statusCode>(EVMC_SUCCESS_NETWORK(.KList)),, <callStack>(_653_2786:List),, <interimStates>(_654_2787:List),, <touchedAccounts>(_655_2788:Set),, <callState>(<program>(Int(#"128") |-> SWAP(Int(#"1")) Int(#"0") |-> PUSH(Int(#"1"),, Int(#"128")) Int(#"129") |-> JUMP_EVM(.KList) Int(#"2") |-> PUSH(Int(#"1"),, Int(#"64")) Int(#"130") |-> INVALID_EVM(.KList) Int(#"131") |-> LOG(Int(#"1")) Int(#"4") |-> MSTORE_EVM(.KList) Int(#"132") |-> PUSH(Int(#"6"),, Int(#"108278179835992")) Int(#"5") |-> PUSH(Int(#"1"),, Int(#"4")) Int(#"7") |-> CALLDATASIZE_EVM(.KList) Int(#"8") |-> LT_EVM(.KList) Int(#"9") |-> PUSH(Int(#"1"),, Int(#"63")) Int(#"11") |-> JUMPI_EVM(.KList) Int(#"139") |-> SHA3_EVM(.KList) Int(#"12") |-> PUSH(Int(#"1"),, Int(#"0")) Int(#"140") |-> DUP(Int(#"5")) Int(#"141") |-> UNDEFINED(_)_EVM(Int(#"173")) Int(#"14") |-> CALLDATALOAD_EVM(.KList) Int(#"142") |-> PUSH(Int(#"26"),, Int(#"149564950478168760381264113381699095436167681510439576405639703")) Int(#"15") |-> PUSH(Int(#"29"),, Int(#"26959946667150639794667015087019630673637144422540572481103610249216")) Int(#"169") |-> SWAP(Int(#"5")) Int(#"170") |-> PUSH(Int(#"17"),, Int(#"32667320108581292420416732063799246323712")) Int(#"45") |-> SWAP(Int(#"1")) Int(#"46") |-> DIV_EVM(.KList) Int(#"47") |-> PUSH(Int(#"4"),, Int(#"4294967295")) Int(#"52") |-> AND_EVM(.KList) Int(#"53") |-> DUP(Int(#"1")) Int(#"54") |-> PUSH(Int(#"4"),, Int(#"1631983956")) Int(#"59") |-> EQ_EVM(.KList) Int(#"60") |-> PUSH(Int(#"1"),, Int(#"68")) Int(#"62") |-> JUMPI_EVM(.KList) Int(#"63") |-> JUMPDEST_EVM(.KList) Int(#"64") |-> PUSH(Int(#"1"),, Int(#"0")) Int(#"66") |-> DUP(Int(#"1")) Int(#"67") |-> REVERT_EVM(.KList) Int(#"68") |-> JUMPDEST_EVM(.KList) Int(#"69") |-> CALLVALUE_EVM(.KList) Int(#"70") |-> DUP(Int(#"1")) Int(#"71") |-> ISZERO_EVM(.KList) Int(#"72") |-> PUSH(Int(#"1"),, Int(#"79")) Int(#"74") |-> JUMPI_EVM(.KList) Int(#"75") |-> PUSH(Int(#"1"),, Int(#"0")) Int(#"77") |-> DUP(Int(#"1")) Int(#"78") |-> REVERT_EVM(.KList) Int(#"79") |-> JUMPDEST_EVM(.KList) Int(#"80") |-> POP_EVM(.KList) Int(#"81") |-> PUSH(Int(#"1"),, Int(#"86")) Int(#"83") |-> PUSH(Int(#"1"),, Int(#"108")) Int(#"85") |-> JUMP_EVM(.KList) Int(#"86") |-> JUMPDEST_EVM(.KList) Int(#"87") |-> PUSH(Int(#"1"),, Int(#"64")) Int(#"89") |-> MLOAD_EVM(.KList) Int(#"90") |-> DUP(Int(#"1")) Int(#"91") |-> DUP(Int(#"3")) Int(#"92") |-> DUP(Int(#"2")) Int(#"93") |-> MSTORE_EVM(.KList) Int(#"94") |-> PUSH(Int(#"1"),, Int(#"32")) Int(#"96") |-> ADD_EVM(.KList) Int(#"97") |-> SWAP(Int(#"2")) Int(#"98") |-> POP_EVM(.KList) Int(#"99") |-> POP_EVM(.KList) Int(#"100") |-> PUSH(Int(#"1"),, Int(#"64")) Int(#"102") |-> MLOAD_EVM(.KList) Int(#"103") |-> DUP(Int(#"1")) Int(#"104") |-> SWAP(Int(#"2")) Int(#"105") |-> SUB_EVM(.KList) Int(#"106") |-> SWAP(Int(#"1")) Int(#"107") |-> RETURN_EVM(.KList) Int(#"108") |-> JUMPDEST_EVM(.KList) Int(#"109") |-> PUSH(Int(#"1"),, Int(#"0")) Int(#"111") |-> PUSH(Int(#"1"),, Int(#"1")) Int(#"113") |-> PUSH(Int(#"1"),, Int(#"0")) Int(#"115") |-> SLOAD_EVM(.KList) Int(#"116") |-> ADD_EVM(.KList) Int(#"117") |-> PUSH(Int(#"1"),, Int(#"0")) Int(#"119") |-> DUP(Int(#"2")) Int(#"120") |-> SWAP(Int(#"1")) Int(#"121") |-> SSTORE_EVM(.KList) Int(#"122") |-> POP_EVM(.KList) Int(#"123") |-> PUSH(Int(#"1"),, Int(#"0")) Int(#"125") |-> SLOAD_EVM(.KList) Int(#"126") |-> SWAP(Int(#"1")) Int(#"127") |-> POP_EVM(.KList)   ),, <programBytes>(_:_WS(Int(#"96"),, _:_WS(Int(#"128"),, _:_WS(Int(#"96"),, _:_WS(Int(#"64"),, _:_WS(Int(#"82"),, _:_WS(Int(#"96"),, _:_WS(Int(#"4"),, _:_WS(Int(#"54"),, _:_WS(Int(#"16"),, _:_WS(Int(#"96"),, _:_WS(Int(#"63"),, _:_WS(Int(#"87"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"53"),, _:_WS(Int(#"124"),, _:_WS(Int(#"1"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"144"),, _:_WS(Int(#"4"),, _:_WS(Int(#"99"),, _:_WS(Int(#"255"),, _:_WS(Int(#"255"),, _:_WS(Int(#"255"),, _:_WS(Int(#"255"),, _:_WS(Int(#"22"),, _:_WS(Int(#"128"),, _:_WS(Int(#"99"),, _:_WS(Int(#"97"),, _:_WS(Int(#"70"),, _:_WS(Int(#"25"),, _:_WS(Int(#"84"),, _:_WS(Int(#"20"),, _:_WS(Int(#"96"),, _:_WS(Int(#"68"),, _:_WS(Int(#"87"),, _:_WS(Int(#"91"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"128"),, _:_WS(Int(#"253"),, _:_WS(Int(#"91"),, _:_WS(Int(#"52"),, _:_WS(Int(#"128"),, _:_WS(Int(#"21"),, _:_WS(Int(#"96"),, _:_WS(Int(#"79"),, _:_WS(Int(#"87"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"128"),, _:_WS(Int(#"253"),, _:_WS(Int(#"91"),, _:_WS(Int(#"80"),, _:_WS(Int(#"96"),, _:_WS(Int(#"86"),, _:_WS(Int(#"96"),, _:_WS(Int(#"108"),, _:_WS(Int(#"86"),, _:_WS(Int(#"91"),, _:_WS(Int(#"96"),, _:_WS(Int(#"64"),, _:_WS(Int(#"81"),, _:_WS(Int(#"128"),, _:_WS(Int(#"130"),, _:_WS(Int(#"129"),, _:_WS(Int(#"82"),, _:_WS(Int(#"96"),, _:_WS(Int(#"32"),, _:_WS(Int(#"1"),, _:_WS(Int(#"145"),, _:_WS(Int(#"80"),, _:_WS(Int(#"80"),, _:_WS(Int(#"96"),, _:_WS(Int(#"64"),, _:_WS(Int(#"81"),, _:_WS(Int(#"128"),, _:_WS(Int(#"145"),, _:_WS(Int(#"3"),, _:_WS(Int(#"144"),, _:_WS(Int(#"243"),, _:_WS(Int(#"91"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"96"),, _:_WS(Int(#"1"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"84"),, _:_WS(Int(#"1"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"129"),, _:_WS(Int(#"144"),, _:_WS(Int(#"85"),, _:_WS(Int(#"80"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"84"),, _:_WS(Int(#"144"),, _:_WS(Int(#"80"),, _:_WS(Int(#"144"),, _:_WS(Int(#"86"),, _:_WS(Int(#"254"),, _:_WS(Int(#"161"),, _:_WS(Int(#"101"),, _:_WS(Int(#"98"),, _:_WS(Int(#"122"),, _:_WS(Int(#"122"),, _:_WS(Int(#"114"),, _:_WS(Int(#"48"),, _:_WS(Int(#"88"),, _:_WS(Int(#"32"),, _:_WS(Int(#"132"),, _:_WS(Int(#"173"),, _:_WS(Int(#"121"),, _:_WS(Int(#"93"),, _:_WS(Int(#"19"),, _:_WS(Int(#"18"),, _:_WS(Int(#"63"),, _:_WS(Int(#"96"),, _:_WS(Int(#"188"),, _:_WS(Int(#"127"),, _:_WS(Int(#"210"),, _:_WS(Int(#"161"),, _:_WS(Int(#"141"),, _:_WS(Int(#"186"),, _:_WS(Int(#"102"),, _:_WS(Int(#"235"),, _:_WS(Int(#"141"),, _:_WS(Int(#"50"),, _:_WS(Int(#"13"),, _:_WS(Int(#"222"),, _:_WS(Int(#"168"),, _:_WS(Int(#"118"),, _:_WS(Int(#"88"),, _:_WS(Int(#"71"),, _:_WS(Int(#"242"),, _:_WS(Int(#"174"),, _:_WS(Int(#"89"),, _:_WS(Int(#"130"),, _:_WS(Int(#"23"),, _:_WS(Int(#"148"),, _:_WS(Int(#"112"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"41"),, .WordStack_EVM-DATA(.KList)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),, <id>(#CONTRACT_ID_VERIFICATION(.KList)),, <caller>(MSG_SENDER_2771:Int),, <callData>(_:_WS(Int(#"97"),, _:_WS(Int(#"70"),, _:_WS(Int(#"25"),, _:_WS(Int(#"84"),, .WordStack_EVM-DATA(.KList)))))),, <callValue>(Int(#"0")),, <wordStack>(_:_WS(Int(#"1631983956"),, .WordStack_EVM-DATA(.KList))),, <localMem>(storeRange(Int(#"64") |-> Int(#"0") Int(#"65") |-> Int(#"0") Int(#"66") |-> Int(#"0") Int(#"67") |-> Int(#"0") Int(#"68") |-> Int(#"0") Int(#"69") |-> Int(#"0") Int(#"70") |-> Int(#"0") Int(#"71") |-> Int(#"0") Int(#"72") |-> Int(#"0") Int(#"73") |-> Int(#"0") Int(#"74") |-> Int(#"0") Int(#"75") |-> Int(#"0") Int(#"76") |-> Int(#"0") Int(#"77") |-> Int(#"0") Int(#"78") |-> Int(#"0") Int(#"79") |-> Int(#"0") Int(#"80") |-> Int(#"0") Int(#"81") |-> Int(#"0") Int(#"82") |-> Int(#"0") Int(#"83") |-> Int(#"0") Int(#"84") |-> Int(#"0") Int(#"85") |-> Int(#"0") Int(#"86") |-> Int(#"0") Int(#"87") |-> Int(#"0") Int(#"88") |-> Int(#"0") Int(#"89") |-> Int(#"0") Int(#"90") |-> Int(#"0") Int(#"91") |-> Int(#"0") Int(#"92") |-> Int(#"0") Int(#"93") |-> Int(#"0") Int(#"94") |-> Int(#"0") Int(#"95") |-> Int(#"128")   ,, Int(#"128"),, Int(#"32"),, #buf(Int(#"32"),, chop(_+Int_(select(S0_2780:Map,, Int(#"0")),, Int(#"1")))))),, <pc>(Int(#"107")),, <gas>(#gas(INITGAS_2773:Int,, _+Int_(Csstore(BYZANTIUM_EVM(.KList),, chop(_+Int_(select(S0_2780:Map,, Int(#"0")),, Int(#"1"))),, select(S0_2780:Map,, Int(#"0")),, select(_686_2819:Map,, Int(#"0"))),, Int(#"607")),, Int(#"15"))),, <memoryUsed>(Int(#"5")),, <previousGas>(#gas(INITGAS_2773:Int,, _+Int_(Csstore(BYZANTIUM_EVM(.KList),, chop(_+Int_(select(S0_2780:Map,, Int(#"0")),, Int(#"1"))),, select(S0_2780:Map,, Int(#"0")),, select(_686_2819:Map,, Int(#"0"))),, Int(#"607")),, Int(#"15"))),, <static>(Bool(#"false")),, <callDepth>(CD_2777:Int)),, <substate>(<selfDestruct>(_664_2797:Set),, <log>(_665_2798:List),, <refund>(_+Int_(_666_2799:Int,, Rsstore(BYZANTIUM_EVM(.KList),, chop(_+Int_(select(S0_2780:Map,, Int(#"0")),, Int(#"1"))),, select(S0_2780:Map,, Int(#"0")),, select(_686_2819:Map,, Int(#"0")))))),, <gasPrice>(_668_2801:Int),, <origin>(_669_2802:Int),, <previousHash>(_670_2803:Int),, <ommersHash>(_671_2804:Int),, <coinbase>(_672_2805:Int),, <stateRoot>(_674_2807:Int),, <transactionsRoot>(_675_2808:Int),, <receiptsRoot>(_676_2809:Int),, <logsBloom>(_677_2810:WordStack),, <difficulty>(_678_2811:Int),, <number>(BLOCK_NUM_2775:Int),, <gasLimit>(_679_2812:Int),, <gasUsed>(_680_2813:Int),, <timestamp>(NOW_2782:Int),, <extraData>(_681_2814:WordStack),, <mixHash>(_682_2815:Int),, <blockNonce>(_683_2816:Int),, <ommerBlockHeaders>(_684_2817:JSON),, <blockhash>(BLOCK_HASHES_2776:List)),, <network>(<activeAccounts>(#CALLEE_ID_VERIFICATION(.KList) Int(#"1") #CONTRACT_ID_VERIFICATION(.KList)_685_2818:Set),, <accounts>(<acctID>(#CONTRACT_ID_VERIFICATION(.KList)) |-> <account>(<acctID>(#CONTRACT_ID_VERIFICATION(.KList)),, <balance>(CONTRACT_BAL_2828:Int),, <code>(_:_WS(Int(#"96"),, _:_WS(Int(#"128"),, _:_WS(Int(#"96"),, _:_WS(Int(#"64"),, _:_WS(Int(#"82"),, _:_WS(Int(#"96"),, _:_WS(Int(#"4"),, _:_WS(Int(#"54"),, _:_WS(Int(#"16"),, _:_WS(Int(#"96"),, _:_WS(Int(#"63"),, _:_WS(Int(#"87"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"53"),, _:_WS(Int(#"124"),, _:_WS(Int(#"1"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"0"),, _:_WS(Int(#"144"),, _:_WS(Int(#"4"),, _:_WS(Int(#"99"),, _:_WS(Int(#"255"),, _:_WS(Int(#"255"),, _:_WS(Int(#"255"),, _:_WS(Int(#"255"),, _:_WS(Int(#"22"),, _:_WS(Int(#"128"),, _:_WS(Int(#"99"),, _:_WS(Int(#"97"),, _:_WS(Int(#"70"),, _:_WS(Int(#"25"),, _:_WS(Int(#"84"),, _:_WS(Int(#"20"),, _:_WS(Int(#"96"),, _:_WS(Int(#"68"),, _:_WS(Int(#"87"),, _:_WS(Int(#"91"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"128"),, _:_WS(Int(#"253"),, _:_WS(Int(#"91"),, _:_WS(Int(#"52"),, _:_WS(Int(#"128"),, _:_WS(Int(#"21"),, _:_WS(Int(#"96"),, _:_WS(Int(#"79"),, _:_WS(Int(#"87"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"128"),, _:_WS(Int(#"253"),, _:_WS(Int(#"91"),, _:_WS(Int(#"80"),, _:_WS(Int(#"96"),, _:_WS(Int(#"86"),, _:_WS(Int(#"96"),, _:_WS(Int(#"108"),, _:_WS(Int(#"86"),, _:_WS(Int(#"91"),, _:_WS(Int(#"96"),, _:_WS(Int(#"64"),, _:_WS(Int(#"81"),, _:_WS(Int(#"128"),, _:_WS(Int(#"130"),, _:_WS(Int(#"129"),, _:_WS(Int(#"82"),, _:_WS(Int(#"96"),, _:_WS(Int(#"32"),, _:_WS(Int(#"1"),, _:_WS(Int(#"145"),, _:_WS(Int(#"80"),, _:_WS(Int(#"80"),, _:_WS(Int(#"96"),, _:_WS(Int(#"64"),, _:_WS(Int(#"81"),, _:_WS(Int(#"128"),, _:_WS(Int(#"145"),, _:_WS(Int(#"3"),, _:_WS(Int(#"144"),, _:_WS(Int(#"243"),, _:_WS(Int(#"91"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"96"),, _:_WS(Int(#"1"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"84"),, _:_WS(Int(#"1"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"129"),, _:_WS(Int(#"144"),, _:_WS(Int(#"85"),, _:_WS(Int(#"80"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"84"),, _:_WS(Int(#"144"),, _:_WS(Int(#"80"),, _:_WS(Int(#"144"),, _:_WS(Int(#"86"),, _:_WS(Int(#"254"),, _:_WS(Int(#"161"),, _:_WS(Int(#"101"),, _:_WS(Int(#"98"),, _:_WS(Int(#"122"),, _:_WS(Int(#"122"),, _:_WS(Int(#"114"),, _:_WS(Int(#"48"),, _:_WS(Int(#"88"),, _:_WS(Int(#"32"),, _:_WS(Int(#"132"),, _:_WS(Int(#"173"),, _:_WS(Int(#"121"),, _:_WS(Int(#"93"),, _:_WS(Int(#"19"),, _:_WS(Int(#"18"),, _:_WS(Int(#"63"),, _:_WS(Int(#"96"),, _:_WS(Int(#"188"),, _:_WS(Int(#"127"),, _:_WS(Int(#"210"),, _:_WS(Int(#"161"),, _:_WS(Int(#"141"),, _:_WS(Int(#"186"),, _:_WS(Int(#"102"),, _:_WS(Int(#"235"),, _:_WS(Int(#"141"),, _:_WS(Int(#"50"),, _:_WS(Int(#"13"),, _:_WS(Int(#"222"),, _:_WS(Int(#"168"),, _:_WS(Int(#"118"),, _:_WS(Int(#"88"),, _:_WS(Int(#"71"),, _:_WS(Int(#"242"),, _:_WS(Int(#"174"),, _:_WS(Int(#"89"),, _:_WS(Int(#"130"),, _:_WS(Int(#"23"),, _:_WS(Int(#"148"),, _:_WS(Int(#"112"),, _:_WS(Int(#"96"),, _:_WS(Int(#"0"),, _:_WS(Int(#"41"),, .WordStack_EVM-DATA(.KList)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),, <storage>(store(S0_2780:Map,, Int(#"0"),, chop(_+Int_(select(S0_2780:Map,, Int(#"0")),, Int(#"1"))))),, <origStorage>(_686_2819:Map),, <nonce>(_687_2820:Int)) <acctID>(#CALLEE_ID_VERIFICATION(.KList)) |-> <account>(<acctID>(#CALLEE_ID_VERIFICATION(.KList)),, <balance>(CALLEE_BAL_2772:Int),, <code>(_688_2821:AccountCode),, <storage>(_689_2822:Map),, <origStorage>(_690_2823:Map),, <nonce>(_691_2824:Int)) <acctID>(Int(#"1")) |-> <account>(<acctID>(Int(#"1")),, <balance>(Int(#"0")),, <code>(.WordStack_EVM-DATA(.KList)),, <storage>(.Map),, <origStorage>(.Map),, <nonce>(Int(#"0")))   DotVar1_2774:Map),, <txOrder>(_692_2825:List),, <txPending>(_693_2826:List),, <messages>(_694_2827:Map))))
/\
ConjunctiveFormula(
  init substitutions:
    _==K_(N0_2778:Int,, select(S0_2780:Map,, Int(#"0")))
    _==K_(N1_2779:Int,, Int(#"0"))
  init equalities:
    _==K_(_<=Int__INT-COMMON(BLOCK_NUM_2775:Int,, Int(#"340282366920938463463374607431768211455")),, Bool(#"true"))
    _==K_(_<=Int__INT-COMMON(Int(#"0"),, BLOCK_NUM_2775:Int),, Bool(#"true"))
    _==K_(_<=Int__INT-COMMON(Int(#"0"),, CD_2777:Int),, Bool(#"true"))
    _==K_(_<=Int__INT-COMMON(Int(#"0"),, CONTRACT_BAL_2828:Int),, Bool(#"true"))
    _==K_(_<=Int__INT-COMMON(Int(#"0"),, MSG_SENDER_2771:Int),, Bool(#"true"))
    _==K_(_<=Int__INT-COMMON(Int(#"0"),, NOW_2782:Int),, Bool(#"true"))
    _==K_(_<Int__INT-COMMON(CD_2777:Int,, Int(#"1024")),, Bool(#"true"))
    _==K_(_<Int__INT-COMMON(CONTRACT_BAL_2828:Int,, Int(#"115792089237316195423570985008687907853269984665640564039457584007913129639936")),, Bool(#"true"))
    _==K_(_<Int__INT-COMMON(Int(#"0"),, #CALLEE_ID_VERIFICATION(.KList)),, Bool(#"true"))
    _==K_(_<Int__INT-COMMON(Int(#"0"),, #CONTRACT_ID_VERIFICATION(.KList)),, Bool(#"true"))
    _==K_(_<Int__INT-COMMON(MSG_SENDER_2771:Int,, Int(#"1461501637330902918203684832716283019655932542976")),, Bool(#"true"))
    _==K_(_<Int__INT-COMMON(NOW_2782:Int,, Int(#"115792089237316195423570985008687907853269984665640564039457584007913129639936")),, Bool(#"true"))
    _==K_(select(S0_2780:Map,, Int(#"0")),, Int(#"115792089237316195423570985008687907853269984665640564039457584007913129639935"))
)


SPEC FAILED: /home/sbugrara/kevm-verify-benchmarks/0-storagevar02-0.5.0/generated/fn-execute-overflow-spec.k Location(11,5,124,17)
==================================
Success execution paths: 0
Failed execution paths: 1
Longest path: 969 steps
Stats for each phase, time, used memory, implicit main GC time percentage:
Total                 :   83.035 s,	  457 MB, gc:  2.111 %
  Parsing             :   74.873 s,	  681 MB, gc:  2.341 %
  Init                :    0.959 s,	  502 MB, gc:  0.000 %
  Execution           :    7.203 s,	  457 MB, gc:  0.000 %

Init+Execution time:       8.162 s
  query build time                 :    0.232 s,      #        247
  Z3 Function rule implication time:    0.145 s,      #         12
      sat           :       11
      unsat (proved):       1
    cached queries:       23
    query build failures: 21
  Z3 Final implication time        :    0.014 s,      #          1
      sat           :       1
  Z3 Spec rule constraint time     :    2.638 s,      #        204
      sat           :       204

  Time and top-level event counts:
  resolveFunctionAndAnywhere time  :    0.684 s,      #      30806
    evaluateFunction time            :    0.636 s,      #       3610
      builtin evaluation               :           ,      #        453
      function rule                    :           ,      #        470
      sort predicate                   :           ,      #        301
      no rule applicable               :           ,      #       2382
      no function rules                :           ,      #          4
    applyAnywhereRules time          :    0.003 s,      #       5900
      no anywhere rules                :           ,      #       5900
    remaining time & # cached        :    0.045 s,      #      21296
  impliesSMT time                  :    0.196 s,      #        124

  Recursive event counts:
  resolveFunctionAndAnywhere time  :           ,      #      13129
    evaluateFunction time            :           ,      #       6905
      builtin evaluation               :           ,      #       3408
      function rule                    :           ,      #       3106
      sort predicate                   :           ,      #         58
      no rule applicable               :           ,      #        317
      no function rules                :           ,      #          3
    applyAnywhereRules time          :           ,      #        677
      no anywhere rules                :           ,      #        677
    # cached                         :           ,      #       5547

Max memory : 3641 MB
==================================

false
[Warning] Internal: execution phase: BuiltinMap can be translated to Z3 only through fresh var . Please re-run with the --debug-z3 flag. Search the logs starting with 'Z3 warning' to see the Z3 implication that generated the warning. (BuiltinMap can be translated to Z3 only through fresh var)
[Warning] Internal: execution phase: missing SMTLib translation for #isBuf . Please re-run with the --debug-z3 flag. Search the logs starting with 'Z3 warning' to see the Z3 implication that generated the warning. (missing SMTLib translation for #isBuf)
[Warning] Internal: execution phase: missing SMTLib translation for #symCmem . Please re-run with the --debug-z3 flag. Search the logs starting with 'Z3 warning' to see the Z3 implication that generated the warning. (missing SMTLib translation for #symCmem)
[Warning] Internal: execution phase: missing SMTLib translation for Csstore . Please re-run with the --debug-z3 flag. Search the logs starting with 'Z3 warning' to see the Z3 implication that generated the warning. (missing SMTLib translation for Csstore)
[Warning] Internal: init phase: missing SMTLib translation for #isBuf . Please re-run with the --debug-z3 flag. Search the logs starting with 'Z3 warning' to see the Z3 implication that generated the warning. (missing SMTLib translation for #isBuf)
../resources/kprove.mak:147: recipe for target 'generated/fn-execute-overflow-spec.k.test' failed
make: *** [generated/fn-execute-overflow-spec.k.test] Error 1

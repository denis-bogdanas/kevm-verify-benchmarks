;root eDSL rule from all other eDSL rules extend
[root]
code: {CONTRACT_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#CONTRACT_ID) SetItem(#CALLEE_ID) SetItem(1) _:Set
accounts:
;contract
contract_bal: CONTRACT_BAL
contract_storage: S0
contract_origstorage: _
contract_nonce: _

callee_bal: CALLEE_BAL
callee_storage: _
callee_origstorage: _
callee_nonce: _
callee_code: _

;origin
requires:
    andBool #rangeUInt(256, CONTRACT_BAL)
ensures:
attribute:


;eDSL rule for external contract function called get5
[execute]
k: (#execute => #halt) ~> _
log: _
callStack: _
this: #CONTRACT_ID
msg_sender: MSG_SENDER
callData:  #abiCallData("execute",
                            #staticarray1(#uint8(_), {THRESHOLD}, #uint8(SIGV0), #uint8(SIGV1)),
                            #staticarray1(#bytes32(_), {THRESHOLD}, #bytes32(SIGR0), #uint8(SIGR1)),
                            #staticarray1(#bytes32(_), {THRESHOLD}, #bytes32(SIGS0), #uint8(SIGS1)),
                            #bytes(#buf(DATA_LEN, DATA)))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _ => _
coinbase: _ => _
+requires:
            andBool #range(0 <= CD < 1024)
            andBool #rangeAddress(MSG_SENDER)
            andBool #rangeUInt(256, DATA_LEN)
            andBool DATA_LEN <Int 2 ^Int 16

            andBool #rangeUInt(8, SIGV0)
            andBool #rangeUInt(8, SIGV1)
            andBool #rangeBytes(32, SIGR0)
            andBool #rangeBytes(32, SIGR1)
            andBool #rangeBytes(32, SIGS0)
            andBool #rangeBytes(32, SIGS1)

[execute-executor-valid-sigcheck-fail-revert-2]
output: _ => _
statusCode: _ => EVMC_REVERT
+requires:
    andBool ECREC_DATA1 ==K #encodeArgs( #bytes32(0), #uint8(SIGV1), #bytes32(SIGR1), #bytes32(SIGS1) )
    andBool #ecrecEmpty( ECREC_DATA1 )


[pgm]
compiler: "Solidity"

threshold = 2

contract_code: "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063701cad0214610046575b600080fd5b34801561005257600080fd5b506101cf600480360360e081101561006957600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019064010000000081111561014957600080fd5b82018360208201111561015b57600080fd5b8035906020019184600183028401116401000000008311171561017d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506101e5565b6040518082815260200191505060405180910390f35b6000806000600102905060008090505b60028110156102e8576000600183898460028110151561021157fe5b6020020151898560028110151561022457fe5b6020020151898660028110151561023757fe5b602002015160405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610293573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161115156102da57600080fd5b5080806001019150506101f5565b50600591505094935050505056fea165627a7a72305820497b3ebf079b66644032f00e574b83a20d8b6d355e5d087401d22fdd392f98680029"